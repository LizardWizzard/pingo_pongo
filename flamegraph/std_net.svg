<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="95918"><g><title>std::io::Write::write_all (82 samples, 0.09%)</title><rect x="0.0000%" y="357" width="0.0855%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="82"/><text x="0.2500%" y="367.50"></text></g><g><title>std::io::default_read_exact (88 samples, 0.09%)</title><rect x="0.0855%" y="357" width="0.0917%" height="15" fill="rgb(217,0,24)" fg:x="82" fg:w="88"/><text x="0.3355%" y="367.50"></text></g><g><title>[unknown] (183 samples, 0.19%)</title><rect x="0.0000%" y="373" width="0.1908%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="183"/><text x="0.2500%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (108 samples, 0.11%)</title><rect x="0.2002%" y="149" width="0.1126%" height="15" fill="rgb(248,212,6)" fg:x="192" fg:w="108"/><text x="0.4502%" y="159.50"></text></g><g><title>__pthread_disable_asynccancel (52 samples, 0.05%)</title><rect x="12.4617%" y="37" width="0.0542%" height="15" fill="rgb(208,68,35)" fg:x="11953" fg:w="52"/><text x="12.7117%" y="47.50"></text></g><g><title>__libc_recv (11,622 samples, 12.12%)</title><rect x="0.4420%" y="53" width="12.1166%" height="15" fill="rgb(232,128,0)" fg:x="424" fg:w="11622"/><text x="0.6920%" y="63.50">__libc_recv</text></g><g><title>__pthread_enable_asynccancel (41 samples, 0.04%)</title><rect x="12.5159%" y="37" width="0.0427%" height="15" fill="rgb(207,160,47)" fg:x="12005" fg:w="41"/><text x="12.7659%" y="47.50"></text></g><g><title>std::io::Read::read_exact (11,776 samples, 12.28%)</title><rect x="0.3128%" y="149" width="12.2772%" height="15" fill="rgb(228,23,34)" fg:x="300" fg:w="11776"/><text x="0.5628%" y="159.50">std::io::Read::rea..</text></g><g><title>std::io::default_read_exact (11,776 samples, 12.28%)</title><rect x="0.3128%" y="133" width="12.2772%" height="15" fill="rgb(218,30,26)" fg:x="300" fg:w="11776"/><text x="0.5628%" y="143.50">std::io::default_r..</text></g><g><title>std::net::udp::UdpSocket::recv (11,667 samples, 12.16%)</title><rect x="0.4264%" y="117" width="12.1635%" height="15" fill="rgb(220,122,19)" fg:x="409" fg:w="11667"/><text x="0.6764%" y="127.50">std::net::udp::Udp..</text></g><g><title>std::sys_common::net::UdpSocket::recv (11,667 samples, 12.16%)</title><rect x="0.4264%" y="101" width="12.1635%" height="15" fill="rgb(250,228,42)" fg:x="409" fg:w="11667"/><text x="0.6764%" y="111.50">std::sys_common::n..</text></g><g><title>std::sys::unix::net::Socket::read (11,667 samples, 12.16%)</title><rect x="0.4264%" y="85" width="12.1635%" height="15" fill="rgb(240,193,28)" fg:x="409" fg:w="11667"/><text x="0.6764%" y="95.50">std::sys::unix::ne..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (11,667 samples, 12.16%)</title><rect x="0.4264%" y="69" width="12.1635%" height="15" fill="rgb(216,20,37)" fg:x="409" fg:w="11667"/><text x="0.6764%" y="79.50">std::sys::unix::ne..</text></g><g><title>std::sys::unix::cvt (30 samples, 0.03%)</title><rect x="12.5586%" y="53" width="0.0313%" height="15" fill="rgb(206,188,39)" fg:x="12046" fg:w="30"/><text x="12.8086%" y="63.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (30 samples, 0.03%)</title><rect x="12.5586%" y="37" width="0.0313%" height="15" fill="rgb(217,207,13)" fg:x="12046" fg:w="30"/><text x="12.8086%" y="47.50"></text></g><g><title>__pthread_disable_asynccancel (72 samples, 0.08%)</title><rect x="49.7404%" y="85" width="0.0751%" height="15" fill="rgb(231,73,38)" fg:x="47710" fg:w="72"/><text x="49.9904%" y="95.50"></text></g><g><title>__libc_send (35,647 samples, 37.16%)</title><rect x="12.6921%" y="101" width="37.1640%" height="15" fill="rgb(225,20,46)" fg:x="12174" fg:w="35647"/><text x="12.9421%" y="111.50">__libc_send</text></g><g><title>__pthread_enable_asynccancel (39 samples, 0.04%)</title><rect x="49.8155%" y="85" width="0.0407%" height="15" fill="rgb(210,31,41)" fg:x="47782" fg:w="39"/><text x="50.0655%" y="95.50"></text></g><g><title>__GI___clone (47,671 samples, 49.70%)</title><rect x="0.1908%" y="373" width="49.6997%" height="15" fill="rgb(221,200,47)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="383.50">__GI___clone</text></g><g><title>start_thread (47,671 samples, 49.70%)</title><rect x="0.1908%" y="357" width="49.6997%" height="15" fill="rgb(226,26,5)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="367.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (47,671 samples, 49.70%)</title><rect x="0.1908%" y="341" width="49.6997%" height="15" fill="rgb(249,33,26)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="351.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (47,671 samples, 49.70%)</title><rect x="0.1908%" y="325" width="49.6997%" height="15" fill="rgb(235,183,28)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="335.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (47,671 samples, 49.70%)</title><rect x="0.1908%" y="309" width="49.6997%" height="15" fill="rgb(221,5,38)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="319.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (47,671 samples, 49.70%)</title><rect x="0.1908%" y="293" width="49.6997%" height="15" fill="rgb(247,18,42)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="303.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (47,671 samples, 49.70%)</title><rect x="0.1908%" y="277" width="49.6997%" height="15" fill="rgb(241,131,45)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="287.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (47,671 samples, 49.70%)</title><rect x="0.1908%" y="261" width="49.6997%" height="15" fill="rgb(249,31,29)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="271.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (47,671 samples, 49.70%)</title><rect x="0.1908%" y="245" width="49.6997%" height="15" fill="rgb(225,111,53)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="255.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (47,671 samples, 49.70%)</title><rect x="0.1908%" y="229" width="49.6997%" height="15" fill="rgb(238,160,17)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="239.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (47,671 samples, 49.70%)</title><rect x="0.1908%" y="213" width="49.6997%" height="15" fill="rgb(214,148,48)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="223.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (47,671 samples, 49.70%)</title><rect x="0.1908%" y="197" width="49.6997%" height="15" fill="rgb(232,36,49)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="207.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (47,671 samples, 49.70%)</title><rect x="0.1908%" y="181" width="49.6997%" height="15" fill="rgb(209,103,24)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="191.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std_net::main::{{closure}} (47,671 samples, 49.70%)</title><rect x="0.1908%" y="165" width="49.6997%" height="15" fill="rgb(229,88,8)" fg:x="183" fg:w="47671"/><text x="0.4408%" y="175.50">std_net::main::{{closure}}</text></g><g><title>std::io::Write::write_all (35,778 samples, 37.30%)</title><rect x="12.5899%" y="149" width="37.3006%" height="15" fill="rgb(213,181,19)" fg:x="12076" fg:w="35778"/><text x="12.8399%" y="159.50">std::io::Write::write_all</text></g><g><title>std::net::udp::UdpSocket::send (35,714 samples, 37.23%)</title><rect x="12.6566%" y="133" width="37.2339%" height="15" fill="rgb(254,191,54)" fg:x="12140" fg:w="35714"/><text x="12.9066%" y="143.50">std::net::udp::UdpSocket::send</text></g><g><title>std::sys_common::net::UdpSocket::send (35,714 samples, 37.23%)</title><rect x="12.6566%" y="117" width="37.2339%" height="15" fill="rgb(241,83,37)" fg:x="12140" fg:w="35714"/><text x="12.9066%" y="127.50">std::sys_common::net::UdpSocket::send</text></g><g><title>std::sys::unix::cvt (33 samples, 0.03%)</title><rect x="49.8561%" y="101" width="0.0344%" height="15" fill="rgb(233,36,39)" fg:x="47821" fg:w="33"/><text x="50.1061%" y="111.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (33 samples, 0.03%)</title><rect x="49.8561%" y="85" width="0.0344%" height="15" fill="rgb(226,3,54)" fg:x="47821" fg:w="33"/><text x="50.1061%" y="95.50"></text></g><g><title>__libc_recv (24 samples, 0.03%)</title><rect x="49.8905%" y="373" width="0.0250%" height="15" fill="rgb(245,192,40)" fg:x="47854" fg:w="24"/><text x="50.1405%" y="383.50"></text></g><g><title>__libc_send (19 samples, 0.02%)</title><rect x="49.9156%" y="373" width="0.0198%" height="15" fill="rgb(238,167,29)" fg:x="47878" fg:w="19"/><text x="50.1656%" y="383.50"></text></g><g><title>std::io::Write::write_all (27 samples, 0.03%)</title><rect x="49.9354%" y="373" width="0.0281%" height="15" fill="rgb(232,182,51)" fg:x="47897" fg:w="27"/><text x="50.1854%" y="383.50"></text></g><g><title>std::io::default_read_exact (26 samples, 0.03%)</title><rect x="49.9635%" y="373" width="0.0271%" height="15" fill="rgb(231,60,39)" fg:x="47924" fg:w="26"/><text x="50.2135%" y="383.50"></text></g><g><title>std::net::udp::UdpSocket::recv (21 samples, 0.02%)</title><rect x="49.9906%" y="373" width="0.0219%" height="15" fill="rgb(208,69,12)" fg:x="47950" fg:w="21"/><text x="50.2406%" y="383.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (20 samples, 0.02%)</title><rect x="49.9917%" y="357" width="0.0209%" height="15" fill="rgb(235,93,37)" fg:x="47951" fg:w="20"/><text x="50.2417%" y="367.50"></text></g><g><title>std::sys::unix::net::Socket::read (20 samples, 0.02%)</title><rect x="49.9917%" y="341" width="0.0209%" height="15" fill="rgb(213,116,39)" fg:x="47951" fg:w="20"/><text x="50.2417%" y="351.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (20 samples, 0.02%)</title><rect x="49.9917%" y="325" width="0.0209%" height="15" fill="rgb(222,207,29)" fg:x="47951" fg:w="20"/><text x="50.2417%" y="335.50"></text></g><g><title>std::net::udp::UdpSocket::send (67 samples, 0.07%)</title><rect x="50.0125%" y="373" width="0.0699%" height="15" fill="rgb(206,96,30)" fg:x="47971" fg:w="67"/><text x="50.2625%" y="383.50"></text></g><g><title>std::sys_common::net::UdpSocket::send (30 samples, 0.03%)</title><rect x="50.0511%" y="357" width="0.0313%" height="15" fill="rgb(218,138,4)" fg:x="48008" fg:w="30"/><text x="50.3011%" y="367.50"></text></g><g><title>pinger (48,061 samples, 50.11%)</title><rect x="0.0000%" y="389" width="50.1063%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="48061"/><text x="0.2500%" y="399.50">pinger</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 0.02%)</title><rect x="50.0824%" y="373" width="0.0240%" height="15" fill="rgb(239,60,40)" fg:x="48038" fg:w="23"/><text x="50.3324%" y="383.50"></text></g><g><title>std_net::main::{{closure}} (23 samples, 0.02%)</title><rect x="50.0824%" y="357" width="0.0240%" height="15" fill="rgb(206,27,48)" fg:x="48038" fg:w="23"/><text x="50.3324%" y="367.50"></text></g><g><title>std::io::Read::read_exact (13 samples, 0.01%)</title><rect x="50.0928%" y="341" width="0.0136%" height="15" fill="rgb(225,35,8)" fg:x="48048" fg:w="13"/><text x="50.3428%" y="351.50"></text></g><g><title>std::io::Write::write_all (15 samples, 0.02%)</title><rect x="50.1063%" y="357" width="0.0156%" height="15" fill="rgb(250,213,24)" fg:x="48061" fg:w="15"/><text x="50.3563%" y="367.50"></text></g><g><title>std::io::default_read_exact (41 samples, 0.04%)</title><rect x="50.1220%" y="357" width="0.0427%" height="15" fill="rgb(247,123,22)" fg:x="48076" fg:w="41"/><text x="50.3720%" y="367.50"></text></g><g><title>[unknown] (71 samples, 0.07%)</title><rect x="50.1063%" y="373" width="0.0740%" height="15" fill="rgb(231,138,38)" fg:x="48061" fg:w="71"/><text x="50.3563%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (96 samples, 0.10%)</title><rect x="50.1887%" y="149" width="0.1001%" height="15" fill="rgb(231,145,46)" fg:x="48140" fg:w="96"/><text x="50.4387%" y="159.50"></text></g><g><title>__pthread_disable_asynccancel (65 samples, 0.07%)</title><rect x="62.6765%" y="37" width="0.0678%" height="15" fill="rgb(251,118,11)" fg:x="60118" fg:w="65"/><text x="62.9265%" y="47.50"></text></g><g><title>__libc_recv (11,855 samples, 12.36%)</title><rect x="50.4202%" y="53" width="12.3595%" height="15" fill="rgb(217,147,25)" fg:x="48362" fg:w="11855"/><text x="50.6702%" y="63.50">__libc_recv</text></g><g><title>__pthread_enable_asynccancel (34 samples, 0.04%)</title><rect x="62.7442%" y="37" width="0.0354%" height="15" fill="rgb(247,81,37)" fg:x="60183" fg:w="34"/><text x="62.9942%" y="47.50"></text></g><g><title>std::io::Read::read_exact (12,025 samples, 12.54%)</title><rect x="50.2888%" y="149" width="12.5368%" height="15" fill="rgb(209,12,38)" fg:x="48236" fg:w="12025"/><text x="50.5388%" y="159.50">std::io::Read::read..</text></g><g><title>std::io::default_read_exact (12,025 samples, 12.54%)</title><rect x="50.2888%" y="133" width="12.5368%" height="15" fill="rgb(227,1,9)" fg:x="48236" fg:w="12025"/><text x="50.5388%" y="143.50">std::io::default_re..</text></g><g><title>std::net::udp::UdpSocket::recv (11,906 samples, 12.41%)</title><rect x="50.4129%" y="117" width="12.4127%" height="15" fill="rgb(248,47,43)" fg:x="48355" fg:w="11906"/><text x="50.6629%" y="127.50">std::net::udp::UdpS..</text></g><g><title>std::sys_common::net::UdpSocket::recv (11,905 samples, 12.41%)</title><rect x="50.4139%" y="101" width="12.4116%" height="15" fill="rgb(221,10,30)" fg:x="48356" fg:w="11905"/><text x="50.6639%" y="111.50">std::sys_common::ne..</text></g><g><title>std::sys::unix::net::Socket::read (11,905 samples, 12.41%)</title><rect x="50.4139%" y="85" width="12.4116%" height="15" fill="rgb(210,229,1)" fg:x="48356" fg:w="11905"/><text x="50.6639%" y="95.50">std::sys::unix::net..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (11,905 samples, 12.41%)</title><rect x="50.4139%" y="69" width="12.4116%" height="15" fill="rgb(222,148,37)" fg:x="48356" fg:w="11905"/><text x="50.6639%" y="79.50">std::sys::unix::net..</text></g><g><title>std::sys::unix::cvt (44 samples, 0.05%)</title><rect x="62.7797%" y="53" width="0.0459%" height="15" fill="rgb(234,67,33)" fg:x="60217" fg:w="44"/><text x="63.0297%" y="63.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (44 samples, 0.05%)</title><rect x="62.7797%" y="37" width="0.0459%" height="15" fill="rgb(247,98,35)" fg:x="60217" fg:w="44"/><text x="63.0297%" y="47.50"></text></g><g><title>__pthread_disable_asynccancel (59 samples, 0.06%)</title><rect x="99.6330%" y="85" width="0.0615%" height="15" fill="rgb(247,138,52)" fg:x="95566" fg:w="59"/><text x="99.8830%" y="95.50"></text></g><g><title>__libc_send (35,282 samples, 36.78%)</title><rect x="62.9559%" y="101" width="36.7835%" height="15" fill="rgb(213,79,30)" fg:x="60386" fg:w="35282"/><text x="63.2059%" y="111.50">__libc_send</text></g><g><title>__pthread_enable_asynccancel (43 samples, 0.04%)</title><rect x="99.6945%" y="85" width="0.0448%" height="15" fill="rgb(246,177,23)" fg:x="95625" fg:w="43"/><text x="99.9445%" y="95.50"></text></g><g><title>std::io::Write::write_all (35,455 samples, 36.96%)</title><rect x="62.8255%" y="149" width="36.9639%" height="15" fill="rgb(230,62,27)" fg:x="60261" fg:w="35455"/><text x="63.0755%" y="159.50">std::io::Write::write_all</text></g><g><title>std::net::udp::UdpSocket::send (35,346 samples, 36.85%)</title><rect x="62.9392%" y="133" width="36.8502%" height="15" fill="rgb(216,154,8)" fg:x="60370" fg:w="35346"/><text x="63.1892%" y="143.50">std::net::udp::UdpSocket::send</text></g><g><title>std::sys_common::net::UdpSocket::send (35,346 samples, 36.85%)</title><rect x="62.9392%" y="117" width="36.8502%" height="15" fill="rgb(244,35,45)" fg:x="60370" fg:w="35346"/><text x="63.1892%" y="127.50">std::sys_common::net::UdpSocket::send</text></g><g><title>std::sys::unix::cvt (48 samples, 0.05%)</title><rect x="99.7394%" y="101" width="0.0500%" height="15" fill="rgb(251,115,12)" fg:x="95668" fg:w="48"/><text x="99.9894%" y="111.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (48 samples, 0.05%)</title><rect x="99.7394%" y="85" width="0.0500%" height="15" fill="rgb(240,54,50)" fg:x="95668" fg:w="48"/><text x="99.9894%" y="95.50"></text></g><g><title>__GI___clone (47,585 samples, 49.61%)</title><rect x="50.1804%" y="373" width="49.6101%" height="15" fill="rgb(233,84,52)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="383.50">__GI___clone</text></g><g><title>start_thread (47,585 samples, 49.61%)</title><rect x="50.1804%" y="357" width="49.6101%" height="15" fill="rgb(207,117,47)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="367.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (47,585 samples, 49.61%)</title><rect x="50.1804%" y="341" width="49.6101%" height="15" fill="rgb(249,43,39)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="351.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (47,585 samples, 49.61%)</title><rect x="50.1804%" y="325" width="49.6101%" height="15" fill="rgb(209,38,44)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="335.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (47,585 samples, 49.61%)</title><rect x="50.1804%" y="309" width="49.6101%" height="15" fill="rgb(236,212,23)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="319.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (47,585 samples, 49.61%)</title><rect x="50.1804%" y="293" width="49.6101%" height="15" fill="rgb(242,79,21)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="303.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (47,585 samples, 49.61%)</title><rect x="50.1804%" y="277" width="49.6101%" height="15" fill="rgb(211,96,35)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="287.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (47,585 samples, 49.61%)</title><rect x="50.1804%" y="261" width="49.6101%" height="15" fill="rgb(253,215,40)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="271.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (47,585 samples, 49.61%)</title><rect x="50.1804%" y="245" width="49.6101%" height="15" fill="rgb(211,81,21)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="255.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (47,585 samples, 49.61%)</title><rect x="50.1804%" y="229" width="49.6101%" height="15" fill="rgb(208,190,38)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="239.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (47,585 samples, 49.61%)</title><rect x="50.1804%" y="213" width="49.6101%" height="15" fill="rgb(235,213,38)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="223.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (47,585 samples, 49.61%)</title><rect x="50.1804%" y="197" width="49.6101%" height="15" fill="rgb(237,122,38)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="207.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (47,585 samples, 49.61%)</title><rect x="50.1804%" y="181" width="49.6101%" height="15" fill="rgb(244,218,35)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="191.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std_net::main::{{closure}} (47,585 samples, 49.61%)</title><rect x="50.1804%" y="165" width="49.6101%" height="15" fill="rgb(240,68,47)" fg:x="48132" fg:w="47585"/><text x="50.4304%" y="175.50">std_net::main::{{closure}}</text></g><g><title>__libc_recv (21 samples, 0.02%)</title><rect x="99.7904%" y="373" width="0.0219%" height="15" fill="rgb(210,16,53)" fg:x="95717" fg:w="21"/><text x="100.0404%" y="383.50"></text></g><g><title>__libc_send (15 samples, 0.02%)</title><rect x="99.8123%" y="373" width="0.0156%" height="15" fill="rgb(235,124,12)" fg:x="95738" fg:w="15"/><text x="100.0623%" y="383.50"></text></g><g><title>std::io::Write::write_all (24 samples, 0.03%)</title><rect x="99.8280%" y="373" width="0.0250%" height="15" fill="rgb(224,169,11)" fg:x="95753" fg:w="24"/><text x="100.0780%" y="383.50"></text></g><g><title>std::io::default_read_exact (25 samples, 0.03%)</title><rect x="99.8530%" y="373" width="0.0261%" height="15" fill="rgb(250,166,2)" fg:x="95777" fg:w="25"/><text x="100.1030%" y="383.50"></text></g><g><title>std::net::udp::UdpSocket::recv (10 samples, 0.01%)</title><rect x="99.8791%" y="373" width="0.0104%" height="15" fill="rgb(242,216,29)" fg:x="95802" fg:w="10"/><text x="100.1291%" y="383.50"></text></g><g><title>std::net::udp::UdpSocket::send (59 samples, 0.06%)</title><rect x="99.8895%" y="373" width="0.0615%" height="15" fill="rgb(230,116,27)" fg:x="95812" fg:w="59"/><text x="100.1395%" y="383.50"></text></g><g><title>std::sys_common::net::UdpSocket::send (20 samples, 0.02%)</title><rect x="99.9301%" y="357" width="0.0209%" height="15" fill="rgb(228,99,48)" fg:x="95851" fg:w="20"/><text x="100.1801%" y="367.50"></text></g><g><title>ponger (47,834 samples, 49.87%)</title><rect x="50.1063%" y="389" width="49.8697%" height="15" fill="rgb(253,11,6)" fg:x="48061" fg:w="47834"/><text x="50.3563%" y="399.50">ponger</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 0.03%)</title><rect x="99.9510%" y="373" width="0.0250%" height="15" fill="rgb(247,143,39)" fg:x="95871" fg:w="24"/><text x="100.2010%" y="383.50"></text></g><g><title>std_net::main::{{closure}} (24 samples, 0.03%)</title><rect x="99.9510%" y="357" width="0.0250%" height="15" fill="rgb(236,97,10)" fg:x="95871" fg:w="24"/><text x="100.2010%" y="367.50"></text></g><g><title>std::io::Read::read_exact (14 samples, 0.01%)</title><rect x="99.9614%" y="341" width="0.0146%" height="15" fill="rgb(233,208,19)" fg:x="95881" fg:w="14"/><text x="100.2114%" y="351.50"></text></g><g><title>__GI___clone (11 samples, 0.01%)</title><rect x="99.9833%" y="373" width="0.0115%" height="15" fill="rgb(216,164,2)" fg:x="95902" fg:w="11"/><text x="100.2333%" y="383.50"></text></g><g><title>all (95,918 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="95918"/><text x="0.2500%" y="415.50"></text></g><g><title>std_net (23 samples, 0.02%)</title><rect x="99.9760%" y="389" width="0.0240%" height="15" fill="rgb(242,17,10)" fg:x="95895" fg:w="23"/><text x="100.2260%" y="399.50"></text></g></svg></svg>