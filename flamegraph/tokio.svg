<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="901.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="146523"><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (15 samples, 0.01%)</title><rect x="0.0048%" y="837" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="15"/><text x="0.2548%" y="847.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (119 samples, 0.08%)</title><rect x="0.0334%" y="837" width="0.0812%" height="15" fill="rgb(217,0,24)" fg:x="49" fg:w="119"/><text x="0.2834%" y="847.50"></text></g><g><title>std::sys_common::net::TcpStream::read (72 samples, 0.05%)</title><rect x="0.0655%" y="821" width="0.0491%" height="15" fill="rgb(221,193,54)" fg:x="96" fg:w="72"/><text x="0.3155%" y="831.50"></text></g><g><title>std::sys::unix::net::Socket::read (72 samples, 0.05%)</title><rect x="0.0655%" y="805" width="0.0491%" height="15" fill="rgb(248,212,6)" fg:x="96" fg:w="72"/><text x="0.3155%" y="815.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (72 samples, 0.05%)</title><rect x="0.0655%" y="789" width="0.0491%" height="15" fill="rgb(208,68,35)" fg:x="96" fg:w="72"/><text x="0.3155%" y="799.50"></text></g><g><title>std::sys::unix::cvt (15 samples, 0.01%)</title><rect x="0.1044%" y="773" width="0.0102%" height="15" fill="rgb(232,128,0)" fg:x="153" fg:w="15"/><text x="0.3544%" y="783.50"></text></g><g><title>std::io::error::Error::last_os_error (15 samples, 0.01%)</title><rect x="0.1044%" y="757" width="0.0102%" height="15" fill="rgb(207,160,47)" fg:x="153" fg:w="15"/><text x="0.3544%" y="767.50"></text></g><g><title>std::sys::unix::os::errno (15 samples, 0.01%)</title><rect x="0.1044%" y="741" width="0.0102%" height="15" fill="rgb(228,23,34)" fg:x="153" fg:w="15"/><text x="0.3544%" y="751.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (19 samples, 0.01%)</title><rect x="0.2116%" y="805" width="0.0130%" height="15" fill="rgb(218,30,26)" fg:x="310" fg:w="19"/><text x="0.4616%" y="815.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (19 samples, 0.01%)</title><rect x="0.2116%" y="789" width="0.0130%" height="15" fill="rgb(220,122,19)" fg:x="310" fg:w="19"/><text x="0.4616%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (155 samples, 0.11%)</title><rect x="0.1194%" y="837" width="0.1058%" height="15" fill="rgb(250,228,42)" fg:x="175" fg:w="155"/><text x="0.3694%" y="847.50"></text></g><g><title>tokio::main::{{closure}}::{{closure}} (20 samples, 0.01%)</title><rect x="0.2116%" y="821" width="0.0136%" height="15" fill="rgb(240,193,28)" fg:x="310" fg:w="20"/><text x="0.4616%" y="831.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="0.2252%" y="837" width="0.0198%" height="15" fill="rgb(216,20,37)" fg:x="330" fg:w="29"/><text x="0.4752%" y="847.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (44 samples, 0.03%)</title><rect x="0.2450%" y="837" width="0.0300%" height="15" fill="rgb(206,188,39)" fg:x="359" fg:w="44"/><text x="0.4950%" y="847.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (15 samples, 0.01%)</title><rect x="0.2648%" y="821" width="0.0102%" height="15" fill="rgb(217,207,13)" fg:x="388" fg:w="15"/><text x="0.5148%" y="831.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (15 samples, 0.01%)</title><rect x="0.2648%" y="805" width="0.0102%" height="15" fill="rgb(231,73,38)" fg:x="388" fg:w="15"/><text x="0.5148%" y="815.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (40 samples, 0.03%)</title><rect x="0.2750%" y="837" width="0.0273%" height="15" fill="rgb(225,20,46)" fg:x="403" fg:w="40"/><text x="0.5250%" y="847.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (53 samples, 0.04%)</title><rect x="0.3023%" y="837" width="0.0362%" height="15" fill="rgb(210,31,41)" fg:x="443" fg:w="53"/><text x="0.5523%" y="847.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (28 samples, 0.02%)</title><rect x="0.3385%" y="837" width="0.0191%" height="15" fill="rgb(221,200,47)" fg:x="496" fg:w="28"/><text x="0.5885%" y="847.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (43 samples, 0.03%)</title><rect x="0.3672%" y="821" width="0.0293%" height="15" fill="rgb(226,26,5)" fg:x="538" fg:w="43"/><text x="0.6172%" y="831.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (21 samples, 0.01%)</title><rect x="0.3822%" y="805" width="0.0143%" height="15" fill="rgb(249,33,26)" fg:x="560" fg:w="21"/><text x="0.6322%" y="815.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (21 samples, 0.01%)</title><rect x="0.3822%" y="789" width="0.0143%" height="15" fill="rgb(235,183,28)" fg:x="560" fg:w="21"/><text x="0.6322%" y="799.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (21 samples, 0.01%)</title><rect x="0.3822%" y="773" width="0.0143%" height="15" fill="rgb(221,5,38)" fg:x="560" fg:w="21"/><text x="0.6322%" y="783.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (41 samples, 0.03%)</title><rect x="0.3965%" y="821" width="0.0280%" height="15" fill="rgb(247,18,42)" fg:x="581" fg:w="41"/><text x="0.6465%" y="831.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (84 samples, 0.06%)</title><rect x="0.4245%" y="821" width="0.0573%" height="15" fill="rgb(241,131,45)" fg:x="622" fg:w="84"/><text x="0.6745%" y="831.50"></text></g><g><title>tokio::io::driver::Handle::wakeup (84 samples, 0.06%)</title><rect x="0.4245%" y="805" width="0.0573%" height="15" fill="rgb(249,31,29)" fg:x="622" fg:w="84"/><text x="0.6745%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (84 samples, 0.06%)</title><rect x="0.4245%" y="789" width="0.0573%" height="15" fill="rgb(225,111,53)" fg:x="622" fg:w="84"/><text x="0.6745%" y="799.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (235 samples, 0.16%)</title><rect x="0.4818%" y="805" width="0.1604%" height="15" fill="rgb(238,160,17)" fg:x="706" fg:w="235"/><text x="0.7318%" y="815.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (123 samples, 0.08%)</title><rect x="0.6422%" y="805" width="0.0839%" height="15" fill="rgb(214,148,48)" fg:x="941" fg:w="123"/><text x="0.8922%" y="815.50"></text></g><g><title>tokio::io::driver::Handle::wakeup (122 samples, 0.08%)</title><rect x="0.6429%" y="789" width="0.0833%" height="15" fill="rgb(232,36,49)" fg:x="942" fg:w="122"/><text x="0.8929%" y="799.50"></text></g><g><title>tokio::io::driver::Handle::inner (117 samples, 0.08%)</title><rect x="0.6463%" y="773" width="0.0799%" height="15" fill="rgb(209,103,24)" fg:x="947" fg:w="117"/><text x="0.8963%" y="783.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (117 samples, 0.08%)</title><rect x="0.6463%" y="757" width="0.0799%" height="15" fill="rgb(229,88,8)" fg:x="947" fg:w="117"/><text x="0.8963%" y="767.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (41 samples, 0.03%)</title><rect x="0.7262%" y="805" width="0.0280%" height="15" fill="rgb(213,181,19)" fg:x="1064" fg:w="41"/><text x="0.9762%" y="815.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (171 samples, 0.12%)</title><rect x="0.7541%" y="805" width="0.1167%" height="15" fill="rgb(254,191,54)" fg:x="1105" fg:w="171"/><text x="1.0041%" y="815.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (20 samples, 0.01%)</title><rect x="0.8709%" y="805" width="0.0136%" height="15" fill="rgb(241,83,37)" fg:x="1276" fg:w="20"/><text x="1.1209%" y="815.50"></text></g><g><title>__clock_gettime_2 (38 samples, 0.03%)</title><rect x="0.8845%" y="805" width="0.0259%" height="15" fill="rgb(233,36,39)" fg:x="1296" fg:w="38"/><text x="1.1345%" y="815.50"></text></g><g><title>__libc_write (55 samples, 0.04%)</title><rect x="0.9104%" y="805" width="0.0375%" height="15" fill="rgb(226,3,54)" fg:x="1334" fg:w="55"/><text x="1.1604%" y="815.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (17 samples, 0.01%)</title><rect x="0.9603%" y="805" width="0.0116%" height="15" fill="rgb(245,192,40)" fg:x="1407" fg:w="17"/><text x="1.2103%" y="815.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (226 samples, 0.15%)</title><rect x="0.9719%" y="805" width="0.1542%" height="15" fill="rgb(238,167,29)" fg:x="1424" fg:w="226"/><text x="1.2219%" y="815.50"></text></g><g><title>&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake (82 samples, 0.06%)</title><rect x="1.1261%" y="789" width="0.0560%" height="15" fill="rgb(232,182,51)" fg:x="1650" fg:w="82"/><text x="1.3761%" y="799.50"></text></g><g><title>&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake_by_ref (82 samples, 0.06%)</title><rect x="1.1261%" y="773" width="0.0560%" height="15" fill="rgb(231,60,39)" fg:x="1650" fg:w="82"/><text x="1.3761%" y="783.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn tokio::park::Unpark&gt; as tokio::park::Unpark&gt;::unpark (82 samples, 0.06%)</title><rect x="1.1261%" y="757" width="0.0560%" height="15" fill="rgb(208,69,12)" fg:x="1650" fg:w="82"/><text x="1.3761%" y="767.50"></text></g><g><title>[unknown] (1,131 samples, 0.77%)</title><rect x="0.4818%" y="821" width="0.7719%" height="15" fill="rgb(235,93,37)" fg:x="706" fg:w="1131"/><text x="0.7318%" y="831.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (187 samples, 0.13%)</title><rect x="1.1261%" y="805" width="0.1276%" height="15" fill="rgb(213,116,39)" fg:x="1650" fg:w="187"/><text x="1.3761%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (105 samples, 0.07%)</title><rect x="1.1821%" y="789" width="0.0717%" height="15" fill="rgb(222,207,29)" fg:x="1732" fg:w="105"/><text x="1.4321%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (105 samples, 0.07%)</title><rect x="1.1821%" y="773" width="0.0717%" height="15" fill="rgb(206,96,30)" fg:x="1732" fg:w="105"/><text x="1.4321%" y="783.50"></text></g><g><title>__clock_gettime_2 (29 samples, 0.02%)</title><rect x="1.2537%" y="821" width="0.0198%" height="15" fill="rgb(218,138,4)" fg:x="1837" fg:w="29"/><text x="1.5037%" y="831.50"></text></g><g><title>__libc_send (26 samples, 0.02%)</title><rect x="1.2735%" y="821" width="0.0177%" height="15" fill="rgb(250,191,14)" fg:x="1866" fg:w="26"/><text x="1.5235%" y="831.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (97 samples, 0.07%)</title><rect x="1.2926%" y="821" width="0.0662%" height="15" fill="rgb(239,60,40)" fg:x="1894" fg:w="97"/><text x="1.5426%" y="831.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (62 samples, 0.04%)</title><rect x="1.3165%" y="805" width="0.0423%" height="15" fill="rgb(206,27,48)" fg:x="1929" fg:w="62"/><text x="1.5665%" y="815.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (61 samples, 0.04%)</title><rect x="1.3588%" y="821" width="0.0416%" height="15" fill="rgb(225,35,8)" fg:x="1991" fg:w="61"/><text x="1.6088%" y="831.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (61 samples, 0.04%)</title><rect x="1.4011%" y="821" width="0.0416%" height="15" fill="rgb(250,213,24)" fg:x="2053" fg:w="61"/><text x="1.6511%" y="831.50"></text></g><g><title>[unknown] (1,704 samples, 1.16%)</title><rect x="0.3672%" y="837" width="1.1630%" height="15" fill="rgb(247,123,22)" fg:x="538" fg:w="1704"/><text x="0.6172%" y="847.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (96 samples, 0.07%)</title><rect x="1.4646%" y="821" width="0.0655%" height="15" fill="rgb(231,138,38)" fg:x="2146" fg:w="96"/><text x="1.7146%" y="831.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (38 samples, 0.03%)</title><rect x="1.5404%" y="501" width="0.0259%" height="15" fill="rgb(231,145,46)" fg:x="2257" fg:w="38"/><text x="1.7904%" y="511.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="2.0563%" y="421" width="0.0116%" height="15" fill="rgb(251,118,11)" fg:x="3013" fg:w="17"/><text x="2.3063%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::time::driver::InnerState&gt;&gt; (17 samples, 0.01%)</title><rect x="2.0563%" y="405" width="0.0116%" height="15" fill="rgb(217,147,25)" fg:x="3013" fg:w="17"/><text x="2.3063%" y="415.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="2.0563%" y="389" width="0.0116%" height="15" fill="rgb(247,81,37)" fg:x="3013" fg:w="17"/><text x="2.3063%" y="399.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (17 samples, 0.01%)</title><rect x="2.0563%" y="373" width="0.0116%" height="15" fill="rgb(209,12,38)" fg:x="3013" fg:w="17"/><text x="2.3063%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (17 samples, 0.01%)</title><rect x="2.0563%" y="357" width="0.0116%" height="15" fill="rgb(227,1,9)" fg:x="3013" fg:w="17"/><text x="2.3063%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="2.0563%" y="341" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="3013" fg:w="17"/><text x="2.3063%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.01%)</title><rect x="2.0679%" y="421" width="0.0136%" height="15" fill="rgb(221,10,30)" fg:x="3030" fg:w="20"/><text x="2.3179%" y="431.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.03%)</title><rect x="2.4256%" y="405" width="0.0314%" height="15" fill="rgb(210,229,1)" fg:x="3554" fg:w="46"/><text x="2.6756%" y="415.50"></text></g><g><title>mio::event::event::Event::token (31 samples, 0.02%)</title><rect x="2.4774%" y="405" width="0.0212%" height="15" fill="rgb(222,148,37)" fg:x="3630" fg:w="31"/><text x="2.7274%" y="415.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::token (31 samples, 0.02%)</title><rect x="2.4774%" y="389" width="0.0212%" height="15" fill="rgb(234,67,33)" fg:x="3630" fg:w="31"/><text x="2.7274%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (52 samples, 0.04%)</title><rect x="2.5873%" y="373" width="0.0355%" height="15" fill="rgb(247,98,35)" fg:x="3791" fg:w="52"/><text x="2.8373%" y="383.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (32 samples, 0.02%)</title><rect x="2.6010%" y="357" width="0.0218%" height="15" fill="rgb(247,138,52)" fg:x="3811" fg:w="32"/><text x="2.8510%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (18 samples, 0.01%)</title><rect x="2.6105%" y="341" width="0.0123%" height="15" fill="rgb(213,79,30)" fg:x="3825" fg:w="18"/><text x="2.8605%" y="351.50"></text></g><g><title>__libc_disable_asynccancel (358 samples, 0.24%)</title><rect x="19.5792%" y="357" width="0.2443%" height="15" fill="rgb(246,177,23)" fg:x="28688" fg:w="358"/><text x="19.8292%" y="367.50"></text></g><g><title>mio::poll::Poll::poll (25,527 samples, 17.42%)</title><rect x="2.4999%" y="405" width="17.4218%" height="15" fill="rgb(230,62,27)" fg:x="3663" fg:w="25527"/><text x="2.7499%" y="415.50">mio::poll::Poll::poll</text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (25,525 samples, 17.42%)</title><rect x="2.5013%" y="389" width="17.4205%" height="15" fill="rgb(216,154,8)" fg:x="3665" fg:w="25525"/><text x="2.7513%" y="399.50">mio::sys::unix::selector::e..</text></g><g><title>epoll_wait (25,347 samples, 17.30%)</title><rect x="2.6228%" y="373" width="17.2990%" height="15" fill="rgb(244,35,45)" fg:x="3843" fg:w="25347"/><text x="2.8728%" y="383.50">epoll_wait</text></g><g><title>__libc_enable_asynccancel (144 samples, 0.10%)</title><rect x="19.8235%" y="357" width="0.0983%" height="15" fill="rgb(251,115,12)" fg:x="29046" fg:w="144"/><text x="20.0735%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (61 samples, 0.04%)</title><rect x="19.9402%" y="373" width="0.0416%" height="15" fill="rgb(240,54,50)" fg:x="29217" fg:w="61"/><text x="20.1902%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.04%)</title><rect x="19.9402%" y="357" width="0.0416%" height="15" fill="rgb(233,84,52)" fg:x="29217" fg:w="61"/><text x="20.1902%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30 samples, 0.02%)</title><rect x="19.9818%" y="373" width="0.0205%" height="15" fill="rgb(207,117,47)" fg:x="29278" fg:w="30"/><text x="20.2318%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.02%)</title><rect x="19.9818%" y="357" width="0.0205%" height="15" fill="rgb(249,43,39)" fg:x="29278" fg:w="30"/><text x="20.2318%" y="367.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (115 samples, 0.08%)</title><rect x="19.9313%" y="389" width="0.0785%" height="15" fill="rgb(209,38,44)" fg:x="29204" fg:w="115"/><text x="20.1813%" y="399.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (122 samples, 0.08%)</title><rect x="20.0453%" y="357" width="0.0833%" height="15" fill="rgb(236,212,23)" fg:x="29371" fg:w="122"/><text x="20.2953%" y="367.50"></text></g><g><title>core::mem::drop (54 samples, 0.04%)</title><rect x="20.1286%" y="357" width="0.0369%" height="15" fill="rgb(242,79,21)" fg:x="29493" fg:w="54"/><text x="20.3786%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::io::driver::scheduled_io::Waiters&gt;&gt; (54 samples, 0.04%)</title><rect x="20.1286%" y="341" width="0.0369%" height="15" fill="rgb(211,96,35)" fg:x="29493" fg:w="54"/><text x="20.3786%" y="351.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.04%)</title><rect x="20.1286%" y="325" width="0.0369%" height="15" fill="rgb(253,215,40)" fg:x="29493" fg:w="54"/><text x="20.3786%" y="335.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (54 samples, 0.04%)</title><rect x="20.1286%" y="309" width="0.0369%" height="15" fill="rgb(211,81,21)" fg:x="29493" fg:w="54"/><text x="20.3786%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (53 samples, 0.04%)</title><rect x="20.1293%" y="293" width="0.0362%" height="15" fill="rgb(208,190,38)" fg:x="29494" fg:w="53"/><text x="20.3793%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (53 samples, 0.04%)</title><rect x="20.1293%" y="277" width="0.0362%" height="15" fill="rgb(235,213,38)" fg:x="29494" fg:w="53"/><text x="20.3793%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (498 samples, 0.34%)</title><rect x="20.1695%" y="357" width="0.3399%" height="15" fill="rgb(237,122,38)" fg:x="29553" fg:w="498"/><text x="20.4195%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (394 samples, 0.27%)</title><rect x="20.2405%" y="341" width="0.2689%" height="15" fill="rgb(244,218,35)" fg:x="29657" fg:w="394"/><text x="20.4905%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::io::driver::Inner&gt;&gt; (30 samples, 0.02%)</title><rect x="20.5599%" y="245" width="0.0205%" height="15" fill="rgb(240,68,47)" fg:x="30125" fg:w="30"/><text x="20.8099%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="20.5599%" y="229" width="0.0205%" height="15" fill="rgb(210,16,53)" fg:x="30125" fg:w="30"/><text x="20.8099%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (30 samples, 0.02%)</title><rect x="20.5599%" y="213" width="0.0205%" height="15" fill="rgb(235,124,12)" fg:x="30125" fg:w="30"/><text x="20.8099%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (30 samples, 0.02%)</title><rect x="20.5599%" y="197" width="0.0205%" height="15" fill="rgb(224,169,11)" fg:x="30125" fg:w="30"/><text x="20.8099%" y="207.50"></text></g><g><title>__pthread_disable_asynccancel (116 samples, 0.08%)</title><rect x="25.8649%" y="165" width="0.0792%" height="15" fill="rgb(250,166,2)" fg:x="37898" fg:w="116"/><text x="26.1149%" y="175.50"></text></g><g><title>__libc_write (7,873 samples, 5.37%)</title><rect x="20.6466%" y="181" width="5.3732%" height="15" fill="rgb(242,216,29)" fg:x="30252" fg:w="7873"/><text x="20.8966%" y="191.50">__libc_..</text></g><g><title>__pthread_enable_asynccancel (111 samples, 0.08%)</title><rect x="25.9440%" y="165" width="0.0758%" height="15" fill="rgb(230,116,27)" fg:x="38014" fg:w="111"/><text x="26.1940%" y="175.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (7,973 samples, 5.44%)</title><rect x="20.5811%" y="245" width="5.4415%" height="15" fill="rgb(228,99,48)" fg:x="30156" fg:w="7973"/><text x="20.8311%" y="255.50">mio::sy..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (7,926 samples, 5.41%)</title><rect x="20.6131%" y="229" width="5.4094%" height="15" fill="rgb(253,11,6)" fg:x="30203" fg:w="7926"/><text x="20.8631%" y="239.50">&lt;&amp;std::..</text></g><g><title>std::sys::unix::fs::File::write (7,888 samples, 5.38%)</title><rect x="20.6391%" y="213" width="5.3835%" height="15" fill="rgb(247,143,39)" fg:x="30241" fg:w="7888"/><text x="20.8891%" y="223.50">std::sy..</text></g><g><title>std::sys::unix::fd::FileDesc::write (7,888 samples, 5.38%)</title><rect x="20.6391%" y="197" width="5.3835%" height="15" fill="rgb(236,97,10)" fg:x="30241" fg:w="7888"/><text x="20.8891%" y="207.50">std::sy..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (44 samples, 0.03%)</title><rect x="26.0464%" y="213" width="0.0300%" height="15" fill="rgb(233,208,19)" fg:x="38164" fg:w="44"/><text x="26.2964%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (44 samples, 0.03%)</title><rect x="26.0464%" y="197" width="0.0300%" height="15" fill="rgb(216,164,2)" fg:x="38164" fg:w="44"/><text x="26.2964%" y="207.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (8,120 samples, 5.54%)</title><rect x="20.5599%" y="277" width="5.5418%" height="15" fill="rgb(220,129,5)" fg:x="30125" fg:w="8120"/><text x="20.8099%" y="287.50">&lt;tokio:..</text></g><g><title>tokio::io::driver::Handle::wakeup (8,120 samples, 5.54%)</title><rect x="20.5599%" y="261" width="5.5418%" height="15" fill="rgb(242,17,10)" fg:x="30125" fg:w="8120"/><text x="20.8099%" y="271.50">tokio::..</text></g><g><title>tokio::io::driver::Handle::inner (104 samples, 0.07%)</title><rect x="26.0307%" y="245" width="0.0710%" height="15" fill="rgb(242,107,0)" fg:x="38141" fg:w="104"/><text x="26.2807%" y="255.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (104 samples, 0.07%)</title><rect x="26.0307%" y="229" width="0.0710%" height="15" fill="rgb(251,28,31)" fg:x="38141" fg:w="104"/><text x="26.2807%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (37 samples, 0.03%)</title><rect x="26.0765%" y="213" width="0.0253%" height="15" fill="rgb(233,223,10)" fg:x="38208" fg:w="37"/><text x="26.3265%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.03%)</title><rect x="26.0765%" y="197" width="0.0253%" height="15" fill="rgb(215,21,27)" fg:x="38208" fg:w="37"/><text x="26.3265%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn tokio::park::Unpark&gt; as tokio::park::Unpark&gt;::unpark (8,291 samples, 5.66%)</title><rect x="20.5394%" y="293" width="5.6585%" height="15" fill="rgb(232,23,21)" fg:x="30095" fg:w="8291"/><text x="20.7894%" y="303.50">&lt;alloc:..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (141 samples, 0.10%)</title><rect x="26.1017%" y="277" width="0.0962%" height="15" fill="rgb(244,5,23)" fg:x="38245" fg:w="141"/><text x="26.3517%" y="287.50"></text></g><g><title>&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake_by_ref (8,313 samples, 5.67%)</title><rect x="20.5388%" y="309" width="5.6735%" height="15" fill="rgb(226,81,46)" fg:x="30094" fg:w="8313"/><text x="20.7888%" y="319.50">&lt;tokio:..</text></g><g><title>core::sync::atomic::AtomicBool::store (21 samples, 0.01%)</title><rect x="26.1979%" y="293" width="0.0143%" height="15" fill="rgb(247,70,30)" fg:x="38386" fg:w="21"/><text x="26.4479%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (21 samples, 0.01%)</title><rect x="26.1979%" y="277" width="0.0143%" height="15" fill="rgb(212,68,19)" fg:x="38386" fg:w="21"/><text x="26.4479%" y="287.50"></text></g><g><title>&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake (8,338 samples, 5.69%)</title><rect x="20.5388%" y="325" width="5.6906%" height="15" fill="rgb(240,187,13)" fg:x="30094" fg:w="8338"/><text x="20.7888%" y="335.50">&lt;tokio:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt; (25 samples, 0.02%)</title><rect x="26.2123%" y="309" width="0.0171%" height="15" fill="rgb(223,113,26)" fg:x="38407" fg:w="25"/><text x="26.4623%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="26.2123%" y="293" width="0.0171%" height="15" fill="rgb(206,192,2)" fg:x="38407" fg:w="25"/><text x="26.4623%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.02%)</title><rect x="26.2129%" y="277" width="0.0164%" height="15" fill="rgb(241,108,4)" fg:x="38408" fg:w="24"/><text x="26.4629%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.02%)</title><rect x="26.2129%" y="261" width="0.0164%" height="15" fill="rgb(247,173,49)" fg:x="38408" fg:w="24"/><text x="26.4629%" y="271.50"></text></g><g><title>core::task::wake::Waker::wake (8,389 samples, 5.73%)</title><rect x="20.5149%" y="357" width="5.7254%" height="15" fill="rgb(224,114,35)" fg:x="30059" fg:w="8389"/><text x="20.7649%" y="367.50">core::t..</text></g><g><title>tokio::util::wake::wake_arc_raw (8,354 samples, 5.70%)</title><rect x="20.5388%" y="341" width="5.7015%" height="15" fill="rgb(245,159,27)" fg:x="30094" fg:w="8354"/><text x="20.7888%" y="351.50">tokio::..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (16 samples, 0.01%)</title><rect x="26.2293%" y="325" width="0.0109%" height="15" fill="rgb(245,172,44)" fg:x="38432" fg:w="16"/><text x="26.4793%" y="335.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (15 samples, 0.01%)</title><rect x="26.2300%" y="309" width="0.0102%" height="15" fill="rgb(236,23,11)" fg:x="38433" fg:w="15"/><text x="26.4800%" y="319.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (9,219 samples, 6.29%)</title><rect x="20.0098%" y="389" width="6.2918%" height="15" fill="rgb(205,117,38)" fg:x="29319" fg:w="9219"/><text x="20.2598%" y="399.50">tokio::i..</text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (9,217 samples, 6.29%)</title><rect x="20.0112%" y="373" width="6.2905%" height="15" fill="rgb(237,72,25)" fg:x="29321" fg:w="9217"/><text x="20.2612%" y="383.50">tokio::i..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (90 samples, 0.06%)</title><rect x="26.2402%" y="357" width="0.0614%" height="15" fill="rgb(244,70,9)" fg:x="38448" fg:w="90"/><text x="26.4902%" y="367.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (90 samples, 0.06%)</title><rect x="26.2402%" y="341" width="0.0614%" height="15" fill="rgb(217,125,39)" fg:x="38448" fg:w="90"/><text x="26.4902%" y="351.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (90 samples, 0.06%)</title><rect x="26.2402%" y="325" width="0.0614%" height="15" fill="rgb(235,36,10)" fg:x="38448" fg:w="90"/><text x="26.4902%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (90 samples, 0.06%)</title><rect x="26.2402%" y="309" width="0.0614%" height="15" fill="rgb(251,123,47)" fg:x="38448" fg:w="90"/><text x="26.4902%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (90 samples, 0.06%)</title><rect x="26.2402%" y="293" width="0.0614%" height="15" fill="rgb(221,13,13)" fg:x="38448" fg:w="90"/><text x="26.4902%" y="303.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (9,437 samples, 6.44%)</title><rect x="19.9218%" y="405" width="6.4406%" height="15" fill="rgb(238,131,9)" fg:x="29190" fg:w="9437"/><text x="20.1718%" y="415.50">tokio::i..</text></g><g><title>tokio::util::slab::Slab&lt;T&gt;::get (89 samples, 0.06%)</title><rect x="26.3017%" y="389" width="0.0607%" height="15" fill="rgb(211,50,8)" fg:x="38538" fg:w="89"/><text x="26.5517%" y="399.50"></text></g><g><title>tokio::util::slab::Page&lt;T&gt;::slot (42 samples, 0.03%)</title><rect x="26.3337%" y="373" width="0.0287%" height="15" fill="rgb(245,182,24)" fg:x="38585" fg:w="42"/><text x="26.5837%" y="383.50"></text></g><g><title>tokio::io::driver::ready::Ready::from_mio (68 samples, 0.05%)</title><rect x="26.3706%" y="405" width="0.0464%" height="15" fill="rgb(242,14,37)" fg:x="38639" fg:w="68"/><text x="26.6206%" y="415.50"></text></g><g><title>tokio::io::driver::Driver::turn (35,671 samples, 24.34%)</title><rect x="2.0816%" y="421" width="24.3450%" height="15" fill="rgb(246,228,12)" fg:x="3050" fg:w="35671"/><text x="2.3316%" y="431.50">tokio::io::driver::Driver::turn</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (99 samples, 0.07%)</title><rect x="26.4266%" y="421" width="0.0676%" height="15" fill="rgb(213,55,15)" fg:x="38721" fg:w="99"/><text x="26.6766%" y="431.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (99 samples, 0.07%)</title><rect x="26.4266%" y="405" width="0.0676%" height="15" fill="rgb(209,9,3)" fg:x="38721" fg:w="99"/><text x="26.6766%" y="415.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (99 samples, 0.07%)</title><rect x="26.4266%" y="389" width="0.0676%" height="15" fill="rgb(230,59,30)" fg:x="38721" fg:w="99"/><text x="26.6766%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (99 samples, 0.07%)</title><rect x="26.4266%" y="373" width="0.0676%" height="15" fill="rgb(209,121,21)" fg:x="38721" fg:w="99"/><text x="26.6766%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (99 samples, 0.07%)</title><rect x="26.4266%" y="357" width="0.0676%" height="15" fill="rgb(220,109,13)" fg:x="38721" fg:w="99"/><text x="26.6766%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (97 samples, 0.07%)</title><rect x="26.5173%" y="405" width="0.0662%" height="15" fill="rgb(232,18,1)" fg:x="38854" fg:w="97"/><text x="26.7673%" y="415.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.07%)</title><rect x="26.5173%" y="389" width="0.0662%" height="15" fill="rgb(215,41,42)" fg:x="38854" fg:w="97"/><text x="26.7673%" y="399.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (97 samples, 0.07%)</title><rect x="26.5173%" y="373" width="0.0662%" height="15" fill="rgb(224,123,36)" fg:x="38854" fg:w="97"/><text x="26.7673%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (96 samples, 0.07%)</title><rect x="26.5180%" y="357" width="0.0655%" height="15" fill="rgb(240,125,3)" fg:x="38855" fg:w="96"/><text x="26.7680%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (96 samples, 0.07%)</title><rect x="26.5180%" y="341" width="0.0655%" height="15" fill="rgb(205,98,50)" fg:x="38855" fg:w="96"/><text x="26.7680%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (117 samples, 0.08%)</title><rect x="26.5835%" y="405" width="0.0799%" height="15" fill="rgb(205,185,37)" fg:x="38951" fg:w="117"/><text x="26.8335%" y="415.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.08%)</title><rect x="26.5835%" y="389" width="0.0799%" height="15" fill="rgb(238,207,15)" fg:x="38951" fg:w="117"/><text x="26.8335%" y="399.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (113 samples, 0.08%)</title><rect x="26.5863%" y="373" width="0.0771%" height="15" fill="rgb(213,199,42)" fg:x="38955" fg:w="113"/><text x="26.8363%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (112 samples, 0.08%)</title><rect x="26.5870%" y="357" width="0.0764%" height="15" fill="rgb(235,201,11)" fg:x="38956" fg:w="112"/><text x="26.8370%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (112 samples, 0.08%)</title><rect x="26.5870%" y="341" width="0.0764%" height="15" fill="rgb(207,46,11)" fg:x="38956" fg:w="112"/><text x="26.8370%" y="351.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (293 samples, 0.20%)</title><rect x="26.6634%" y="405" width="0.2000%" height="15" fill="rgb(241,35,35)" fg:x="39068" fg:w="293"/><text x="26.9134%" y="415.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (293 samples, 0.20%)</title><rect x="26.6634%" y="389" width="0.2000%" height="15" fill="rgb(243,32,47)" fg:x="39068" fg:w="293"/><text x="26.9134%" y="399.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (293 samples, 0.20%)</title><rect x="26.6634%" y="373" width="0.2000%" height="15" fill="rgb(247,202,23)" fg:x="39068" fg:w="293"/><text x="26.9134%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (288 samples, 0.20%)</title><rect x="26.6668%" y="357" width="0.1966%" height="15" fill="rgb(219,102,11)" fg:x="39073" fg:w="288"/><text x="26.9168%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (288 samples, 0.20%)</title><rect x="26.6668%" y="341" width="0.1966%" height="15" fill="rgb(243,110,44)" fg:x="39073" fg:w="288"/><text x="26.9168%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (338 samples, 0.23%)</title><rect x="26.8709%" y="357" width="0.2307%" height="15" fill="rgb(222,74,54)" fg:x="39372" fg:w="338"/><text x="27.1209%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (338 samples, 0.23%)</title><rect x="26.8709%" y="341" width="0.2307%" height="15" fill="rgb(216,99,12)" fg:x="39372" fg:w="338"/><text x="27.1209%" y="351.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (894 samples, 0.61%)</title><rect x="26.4941%" y="421" width="0.6101%" height="15" fill="rgb(226,22,26)" fg:x="38820" fg:w="894"/><text x="26.7441%" y="431.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (353 samples, 0.24%)</title><rect x="26.8634%" y="405" width="0.2409%" height="15" fill="rgb(217,163,10)" fg:x="39361" fg:w="353"/><text x="27.1134%" y="415.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (353 samples, 0.24%)</title><rect x="26.8634%" y="389" width="0.2409%" height="15" fill="rgb(213,25,53)" fg:x="39361" fg:w="353"/><text x="27.1134%" y="399.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (353 samples, 0.24%)</title><rect x="26.8634%" y="373" width="0.2409%" height="15" fill="rgb(252,105,26)" fg:x="39361" fg:w="353"/><text x="27.1134%" y="383.50"></text></g><g><title>tokio::coop::CURRENT::__getit (43 samples, 0.03%)</title><rect x="27.2060%" y="325" width="0.0293%" height="15" fill="rgb(220,39,43)" fg:x="39863" fg:w="43"/><text x="27.4560%" y="335.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (43 samples, 0.03%)</title><rect x="27.2060%" y="309" width="0.0293%" height="15" fill="rgb(229,68,48)" fg:x="39863" fg:w="43"/><text x="27.4560%" y="319.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (38 samples, 0.03%)</title><rect x="27.2094%" y="293" width="0.0259%" height="15" fill="rgb(252,8,32)" fg:x="39868" fg:w="38"/><text x="27.4594%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (38 samples, 0.03%)</title><rect x="27.2094%" y="277" width="0.0259%" height="15" fill="rgb(223,20,43)" fg:x="39868" fg:w="38"/><text x="27.4594%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (15 samples, 0.01%)</title><rect x="27.2415%" y="309" width="0.0102%" height="15" fill="rgb(229,81,49)" fg:x="39915" fg:w="15"/><text x="27.4915%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (15 samples, 0.01%)</title><rect x="27.2415%" y="293" width="0.0102%" height="15" fill="rgb(236,28,36)" fg:x="39915" fg:w="15"/><text x="27.4915%" y="303.50"></text></g><g><title>core::mem::replace (15 samples, 0.01%)</title><rect x="27.2415%" y="277" width="0.0102%" height="15" fill="rgb(249,185,26)" fg:x="39915" fg:w="15"/><text x="27.4915%" y="287.50"></text></g><g><title>core::ptr::write (15 samples, 0.01%)</title><rect x="27.2415%" y="261" width="0.0102%" height="15" fill="rgb(249,174,33)" fg:x="39915" fg:w="15"/><text x="27.4915%" y="271.50"></text></g><g><title>tokio::coop::poll_proceed (69 samples, 0.05%)</title><rect x="27.2060%" y="373" width="0.0471%" height="15" fill="rgb(233,201,37)" fg:x="39863" fg:w="69"/><text x="27.4560%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (69 samples, 0.05%)</title><rect x="27.2060%" y="357" width="0.0471%" height="15" fill="rgb(221,78,26)" fg:x="39863" fg:w="69"/><text x="27.4560%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (69 samples, 0.05%)</title><rect x="27.2060%" y="341" width="0.0471%" height="15" fill="rgb(250,127,30)" fg:x="39863" fg:w="69"/><text x="27.4560%" y="351.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (26 samples, 0.02%)</title><rect x="27.2353%" y="325" width="0.0177%" height="15" fill="rgb(230,49,44)" fg:x="39906" fg:w="26"/><text x="27.4853%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::io::driver::scheduled_io::Waiters&gt;&gt; (62 samples, 0.04%)</title><rect x="27.3384%" y="357" width="0.0423%" height="15" fill="rgb(229,67,23)" fg:x="40057" fg:w="62"/><text x="27.5884%" y="367.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="27.3384%" y="341" width="0.0423%" height="15" fill="rgb(249,83,47)" fg:x="40057" fg:w="62"/><text x="27.5884%" y="351.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (62 samples, 0.04%)</title><rect x="27.3384%" y="325" width="0.0423%" height="15" fill="rgb(215,43,3)" fg:x="40057" fg:w="62"/><text x="27.5884%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (61 samples, 0.04%)</title><rect x="27.3391%" y="309" width="0.0416%" height="15" fill="rgb(238,154,13)" fg:x="40058" fg:w="61"/><text x="27.5891%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.04%)</title><rect x="27.3391%" y="293" width="0.0416%" height="15" fill="rgb(219,56,2)" fg:x="40058" fg:w="61"/><text x="27.5891%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 0.02%)</title><rect x="27.3807%" y="357" width="0.0157%" height="15" fill="rgb(233,0,4)" fg:x="40119" fg:w="23"/><text x="27.6307%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="27.3807%" y="341" width="0.0157%" height="15" fill="rgb(235,30,7)" fg:x="40119" fg:w="23"/><text x="27.6307%" y="351.50"></text></g><g><title>core::task::wake::Waker::will_wake (33 samples, 0.02%)</title><rect x="27.3964%" y="357" width="0.0225%" height="15" fill="rgb(250,79,13)" fg:x="40142" fg:w="33"/><text x="27.6464%" y="367.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (33 samples, 0.02%)</title><rect x="27.3964%" y="341" width="0.0225%" height="15" fill="rgb(211,146,34)" fg:x="40142" fg:w="33"/><text x="27.6464%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (19 samples, 0.01%)</title><rect x="27.4059%" y="325" width="0.0130%" height="15" fill="rgb(228,22,38)" fg:x="40156" fg:w="19"/><text x="27.6559%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (19 samples, 0.01%)</title><rect x="27.4059%" y="309" width="0.0130%" height="15" fill="rgb(235,168,5)" fg:x="40156" fg:w="19"/><text x="27.6559%" y="319.50"></text></g><g><title>tokio::signal::unix::driver::Driver::process (588 samples, 0.40%)</title><rect x="27.1043%" y="421" width="0.4013%" height="15" fill="rgb(221,155,16)" fg:x="39714" fg:w="588"/><text x="27.3543%" y="431.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_ready (489 samples, 0.33%)</title><rect x="27.1718%" y="405" width="0.3337%" height="15" fill="rgb(215,215,53)" fg:x="39813" fg:w="489"/><text x="27.4218%" y="415.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (486 samples, 0.33%)</title><rect x="27.1739%" y="389" width="0.3317%" height="15" fill="rgb(223,4,10)" fg:x="39816" fg:w="486"/><text x="27.4239%" y="399.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (370 samples, 0.25%)</title><rect x="27.2531%" y="373" width="0.2525%" height="15" fill="rgb(234,103,6)" fg:x="39932" fg:w="370"/><text x="27.5031%" y="383.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (122 samples, 0.08%)</title><rect x="27.4223%" y="357" width="0.0833%" height="15" fill="rgb(227,97,0)" fg:x="40180" fg:w="122"/><text x="27.6723%" y="367.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (122 samples, 0.08%)</title><rect x="27.4223%" y="341" width="0.0833%" height="15" fill="rgb(234,150,53)" fg:x="40180" fg:w="122"/><text x="27.6723%" y="351.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (122 samples, 0.08%)</title><rect x="27.4223%" y="325" width="0.0833%" height="15" fill="rgb(228,201,54)" fg:x="40180" fg:w="122"/><text x="27.6723%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (119 samples, 0.08%)</title><rect x="27.4244%" y="309" width="0.0812%" height="15" fill="rgb(222,22,37)" fg:x="40183" fg:w="119"/><text x="27.6744%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (119 samples, 0.08%)</title><rect x="27.4244%" y="293" width="0.0812%" height="15" fill="rgb(237,53,32)" fg:x="40183" fg:w="119"/><text x="27.6744%" y="303.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (305 samples, 0.21%)</title><rect x="27.5602%" y="389" width="0.2082%" height="15" fill="rgb(233,25,53)" fg:x="40382" fg:w="305"/><text x="27.8102%" y="399.50"></text></g><g><title>core::mem::drop (38 samples, 0.03%)</title><rect x="27.7711%" y="389" width="0.0259%" height="15" fill="rgb(210,40,34)" fg:x="40691" fg:w="38"/><text x="28.0211%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::time::driver::InnerState&gt;&gt; (38 samples, 0.03%)</title><rect x="27.7711%" y="373" width="0.0259%" height="15" fill="rgb(241,220,44)" fg:x="40691" fg:w="38"/><text x="28.0211%" y="383.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="27.7711%" y="357" width="0.0259%" height="15" fill="rgb(235,28,35)" fg:x="40691" fg:w="38"/><text x="28.0211%" y="367.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (38 samples, 0.03%)</title><rect x="27.7711%" y="341" width="0.0259%" height="15" fill="rgb(210,56,17)" fg:x="40691" fg:w="38"/><text x="28.0211%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (38 samples, 0.03%)</title><rect x="27.7711%" y="325" width="0.0259%" height="15" fill="rgb(224,130,29)" fg:x="40691" fg:w="38"/><text x="28.0211%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="27.7711%" y="309" width="0.0259%" height="15" fill="rgb(235,212,8)" fg:x="40691" fg:w="38"/><text x="28.0211%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (549 samples, 0.37%)</title><rect x="27.7970%" y="389" width="0.3747%" height="15" fill="rgb(223,33,50)" fg:x="40729" fg:w="549"/><text x="28.0470%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (496 samples, 0.34%)</title><rect x="27.8332%" y="373" width="0.3385%" height="15" fill="rgb(219,149,13)" fg:x="40782" fg:w="496"/><text x="28.0832%" y="383.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (49 samples, 0.03%)</title><rect x="28.1717%" y="389" width="0.0334%" height="15" fill="rgb(250,156,29)" fg:x="41278" fg:w="49"/><text x="28.4217%" y="399.50"></text></g><g><title>tokio::time::driver::Inner::lock (131 samples, 0.09%)</title><rect x="28.2051%" y="389" width="0.0894%" height="15" fill="rgb(216,193,19)" fg:x="41327" fg:w="131"/><text x="28.4551%" y="399.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (131 samples, 0.09%)</title><rect x="28.2051%" y="373" width="0.0894%" height="15" fill="rgb(216,135,14)" fg:x="41327" fg:w="131"/><text x="28.4551%" y="383.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (131 samples, 0.09%)</title><rect x="28.2051%" y="357" width="0.0894%" height="15" fill="rgb(241,47,5)" fg:x="41327" fg:w="131"/><text x="28.4551%" y="367.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (131 samples, 0.09%)</title><rect x="28.2051%" y="341" width="0.0894%" height="15" fill="rgb(233,42,35)" fg:x="41327" fg:w="131"/><text x="28.4551%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (130 samples, 0.09%)</title><rect x="28.2058%" y="325" width="0.0887%" height="15" fill="rgb(231,13,6)" fg:x="41328" fg:w="130"/><text x="28.4558%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (130 samples, 0.09%)</title><rect x="28.2058%" y="309" width="0.0887%" height="15" fill="rgb(207,181,40)" fg:x="41328" fg:w="130"/><text x="28.4558%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (69 samples, 0.05%)</title><rect x="28.3648%" y="341" width="0.0471%" height="15" fill="rgb(254,173,49)" fg:x="41561" fg:w="69"/><text x="28.6148%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (21 samples, 0.01%)</title><rect x="28.3976%" y="325" width="0.0143%" height="15" fill="rgb(221,1,38)" fg:x="41609" fg:w="21"/><text x="28.6476%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (73 samples, 0.05%)</title><rect x="28.4119%" y="325" width="0.0498%" height="15" fill="rgb(206,124,46)" fg:x="41630" fg:w="73"/><text x="28.6619%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (144 samples, 0.10%)</title><rect x="28.3648%" y="357" width="0.0983%" height="15" fill="rgb(249,21,11)" fg:x="41561" fg:w="144"/><text x="28.6148%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (75 samples, 0.05%)</title><rect x="28.4119%" y="341" width="0.0512%" height="15" fill="rgb(222,201,40)" fg:x="41630" fg:w="75"/><text x="28.6619%" y="351.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (65 samples, 0.04%)</title><rect x="28.5355%" y="341" width="0.0444%" height="15" fill="rgb(235,61,29)" fg:x="41811" fg:w="65"/><text x="28.7855%" y="351.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (182 samples, 0.12%)</title><rect x="28.4631%" y="357" width="0.1242%" height="15" fill="rgb(219,207,3)" fg:x="41705" fg:w="182"/><text x="28.7131%" y="367.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (446 samples, 0.30%)</title><rect x="28.2945%" y="373" width="0.3044%" height="15" fill="rgb(222,56,46)" fg:x="41458" fg:w="446"/><text x="28.5445%" y="383.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (17 samples, 0.01%)</title><rect x="28.5873%" y="357" width="0.0116%" height="15" fill="rgb(239,76,54)" fg:x="41887" fg:w="17"/><text x="28.8373%" y="367.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::set_elapsed (20 samples, 0.01%)</title><rect x="28.5989%" y="373" width="0.0136%" height="15" fill="rgb(231,124,27)" fg:x="41904" fg:w="20"/><text x="28.8489%" y="383.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (471 samples, 0.32%)</title><rect x="28.2945%" y="389" width="0.3215%" height="15" fill="rgb(249,195,6)" fg:x="41458" fg:w="471"/><text x="28.5445%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.02%)</title><rect x="28.6638%" y="341" width="0.0150%" height="15" fill="rgb(237,174,47)" fg:x="41999" fg:w="22"/><text x="28.9138%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (56 samples, 0.04%)</title><rect x="28.6638%" y="357" width="0.0382%" height="15" fill="rgb(206,201,31)" fg:x="41999" fg:w="56"/><text x="28.9138%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (34 samples, 0.02%)</title><rect x="28.6788%" y="341" width="0.0232%" height="15" fill="rgb(231,57,52)" fg:x="42021" fg:w="34"/><text x="28.9288%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (34 samples, 0.02%)</title><rect x="28.6788%" y="325" width="0.0232%" height="15" fill="rgb(248,177,22)" fg:x="42021" fg:w="34"/><text x="28.9288%" y="335.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (45 samples, 0.03%)</title><rect x="28.7020%" y="357" width="0.0307%" height="15" fill="rgb(215,211,37)" fg:x="42055" fg:w="45"/><text x="28.9520%" y="367.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (27 samples, 0.02%)</title><rect x="28.7143%" y="341" width="0.0184%" height="15" fill="rgb(241,128,51)" fg:x="42073" fg:w="27"/><text x="28.9643%" y="351.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1,804 samples, 1.23%)</title><rect x="27.5056%" y="405" width="1.2312%" height="15" fill="rgb(227,165,31)" fg:x="40302" fg:w="1804"/><text x="27.7556%" y="415.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll_at (177 samples, 0.12%)</title><rect x="28.6160%" y="389" width="0.1208%" height="15" fill="rgb(228,167,24)" fg:x="41929" fg:w="177"/><text x="28.8660%" y="399.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (177 samples, 0.12%)</title><rect x="28.6160%" y="373" width="0.1208%" height="15" fill="rgb(228,143,12)" fg:x="41929" fg:w="177"/><text x="28.8660%" y="383.50"></text></g><g><title>tokio::time::clock::Clock::now (573 samples, 0.39%)</title><rect x="28.7525%" y="389" width="0.3911%" height="15" fill="rgb(249,149,8)" fg:x="42129" fg:w="573"/><text x="29.0025%" y="399.50"></text></g><g><title>tokio::time::clock::now (573 samples, 0.39%)</title><rect x="28.7525%" y="373" width="0.3911%" height="15" fill="rgb(243,35,44)" fg:x="42129" fg:w="573"/><text x="29.0025%" y="383.50"></text></g><g><title>std::time::Instant::now (573 samples, 0.39%)</title><rect x="28.7525%" y="357" width="0.3911%" height="15" fill="rgb(246,89,9)" fg:x="42129" fg:w="573"/><text x="29.0025%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (573 samples, 0.39%)</title><rect x="28.7525%" y="341" width="0.3911%" height="15" fill="rgb(233,213,13)" fg:x="42129" fg:w="573"/><text x="29.0025%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::now (573 samples, 0.39%)</title><rect x="28.7525%" y="325" width="0.3911%" height="15" fill="rgb(233,141,41)" fg:x="42129" fg:w="573"/><text x="29.0025%" y="335.50"></text></g><g><title>__clock_gettime_2 (545 samples, 0.37%)</title><rect x="28.7716%" y="309" width="0.3720%" height="15" fill="rgb(239,167,4)" fg:x="42157" fg:w="545"/><text x="29.0216%" y="319.50"></text></g><g><title>__vdso_clock_gettime (381 samples, 0.26%)</title><rect x="28.8835%" y="293" width="0.2600%" height="15" fill="rgb(209,217,16)" fg:x="42321" fg:w="381"/><text x="29.1335%" y="303.50"></text></g><g><title>[[vdso]] (98 samples, 0.07%)</title><rect x="29.0767%" y="277" width="0.0669%" height="15" fill="rgb(219,88,35)" fg:x="42604" fg:w="98"/><text x="29.3267%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (24 samples, 0.02%)</title><rect x="29.1435%" y="373" width="0.0164%" height="15" fill="rgb(220,193,23)" fg:x="42702" fg:w="24"/><text x="29.3935%" y="383.50"></text></g><g><title>core::time::Duration::as_millis (68 samples, 0.05%)</title><rect x="29.1647%" y="373" width="0.0464%" height="15" fill="rgb(230,90,52)" fg:x="42733" fg:w="68"/><text x="29.4147%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (47 samples, 0.03%)</title><rect x="29.2207%" y="325" width="0.0321%" height="15" fill="rgb(252,106,19)" fg:x="42815" fg:w="47"/><text x="29.4707%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (60 samples, 0.04%)</title><rect x="29.2957%" y="309" width="0.0409%" height="15" fill="rgb(206,74,20)" fg:x="42925" fg:w="60"/><text x="29.5457%" y="319.50"></text></g><g><title>core::cmp::PartialOrd::ge (60 samples, 0.04%)</title><rect x="29.2957%" y="293" width="0.0409%" height="15" fill="rgb(230,138,44)" fg:x="42925" fg:w="60"/><text x="29.5457%" y="303.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (55 samples, 0.04%)</title><rect x="29.2992%" y="277" width="0.0375%" height="15" fill="rgb(235,182,43)" fg:x="42930" fg:w="55"/><text x="29.5492%" y="287.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (55 samples, 0.04%)</title><rect x="29.2992%" y="261" width="0.0375%" height="15" fill="rgb(242,16,51)" fg:x="42930" fg:w="55"/><text x="29.5492%" y="271.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (55 samples, 0.04%)</title><rect x="29.2992%" y="245" width="0.0375%" height="15" fill="rgb(248,9,4)" fg:x="42930" fg:w="55"/><text x="29.5492%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (18 samples, 0.01%)</title><rect x="29.3244%" y="229" width="0.0123%" height="15" fill="rgb(210,31,22)" fg:x="42967" fg:w="18"/><text x="29.5744%" y="239.50"></text></g><g><title>std::time::Instant::checked_duration_since (233 samples, 0.16%)</title><rect x="29.2111%" y="357" width="0.1590%" height="15" fill="rgb(239,54,39)" fg:x="42801" fg:w="233"/><text x="29.4611%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (219 samples, 0.15%)</title><rect x="29.2207%" y="341" width="0.1495%" height="15" fill="rgb(230,99,41)" fg:x="42815" fg:w="219"/><text x="29.4707%" y="351.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (172 samples, 0.12%)</title><rect x="29.2527%" y="325" width="0.1174%" height="15" fill="rgb(253,106,12)" fg:x="42862" fg:w="172"/><text x="29.5027%" y="335.50"></text></g><g><title>core::time::Duration::new (49 samples, 0.03%)</title><rect x="29.3367%" y="309" width="0.0334%" height="15" fill="rgb(213,46,41)" fg:x="42985" fg:w="49"/><text x="29.5867%" y="319.50"></text></g><g><title>tokio::time::driver::ClockTime::now (940 samples, 0.64%)</title><rect x="28.7368%" y="405" width="0.6415%" height="15" fill="rgb(215,133,35)" fg:x="42106" fg:w="940"/><text x="28.9868%" y="415.50"></text></g><g><title>tokio::time::driver::ClockTime::instant_to_tick (344 samples, 0.23%)</title><rect x="29.1435%" y="389" width="0.2348%" height="15" fill="rgb(213,28,5)" fg:x="42702" fg:w="344"/><text x="29.3935%" y="399.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (245 samples, 0.17%)</title><rect x="29.2111%" y="373" width="0.1672%" height="15" fill="rgb(215,77,49)" fg:x="42801" fg:w="245"/><text x="29.4611%" y="383.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (2,753 samples, 1.88%)</title><rect x="27.5056%" y="421" width="1.8789%" height="15" fill="rgb(248,100,22)" fg:x="40302" fg:w="2753"/><text x="27.7556%" y="431.50">t..</text></g><g><title>tokio::time::driver::handle::Handle::get (25 samples, 0.02%)</title><rect x="29.3858%" y="421" width="0.0171%" height="15" fill="rgb(208,67,9)" fg:x="43057" fg:w="25"/><text x="29.6358%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (55 samples, 0.04%)</title><rect x="29.4807%" y="389" width="0.0375%" height="15" fill="rgb(219,133,21)" fg:x="43196" fg:w="55"/><text x="29.7307%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (55 samples, 0.04%)</title><rect x="29.4807%" y="373" width="0.0375%" height="15" fill="rgb(246,46,29)" fg:x="43196" fg:w="55"/><text x="29.7307%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (55 samples, 0.04%)</title><rect x="29.4807%" y="357" width="0.0375%" height="15" fill="rgb(246,185,52)" fg:x="43196" fg:w="55"/><text x="29.7307%" y="367.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (69 samples, 0.05%)</title><rect x="29.5831%" y="373" width="0.0471%" height="15" fill="rgb(252,136,11)" fg:x="43346" fg:w="69"/><text x="29.8331%" y="383.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (180 samples, 0.12%)</title><rect x="29.5182%" y="389" width="0.1228%" height="15" fill="rgb(219,138,53)" fg:x="43251" fg:w="180"/><text x="29.7682%" y="399.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_occupied_slot (16 samples, 0.01%)</title><rect x="29.6302%" y="373" width="0.0109%" height="15" fill="rgb(211,51,23)" fg:x="43415" fg:w="16"/><text x="29.8802%" y="383.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (350 samples, 0.24%)</title><rect x="29.4104%" y="405" width="0.2389%" height="15" fill="rgb(247,221,28)" fg:x="43093" fg:w="350"/><text x="29.6604%" y="415.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (41,074 samples, 28.03%)</title><rect x="1.6223%" y="485" width="28.0325%" height="15" fill="rgb(251,222,45)" fg:x="2377" fg:w="41074"/><text x="1.8723%" y="495.50">&lt;tokio::runtime::driver::Driver as tokio::par..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (41,026 samples, 28.00%)</title><rect x="1.6550%" y="469" width="27.9997%" height="15" fill="rgb(217,162,53)" fg:x="2425" fg:w="41026"/><text x="1.9050%" y="479.50">&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::p..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (40,974 samples, 27.96%)</title><rect x="1.6905%" y="453" width="27.9642%" height="15" fill="rgb(229,93,14)" fg:x="2477" fg:w="40974"/><text x="1.9405%" y="463.50">&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::par..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (40,935 samples, 27.94%)</title><rect x="1.7171%" y="437" width="27.9376%" height="15" fill="rgb(209,67,49)" fg:x="2516" fg:w="40935"/><text x="1.9671%" y="447.50">tokio::time::driver::Driver&lt;P&gt;::park_internal</text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (367 samples, 0.25%)</title><rect x="29.4043%" y="421" width="0.2505%" height="15" fill="rgb(213,87,29)" fg:x="43084" fg:w="367"/><text x="29.6543%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (23 samples, 0.02%)</title><rect x="29.6547%" y="485" width="0.0157%" height="15" fill="rgb(205,151,52)" fg:x="43451" fg:w="23"/><text x="29.9047%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (15 samples, 0.01%)</title><rect x="29.6704%" y="485" width="0.0102%" height="15" fill="rgb(253,215,39)" fg:x="43474" fg:w="15"/><text x="29.9204%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (15 samples, 0.01%)</title><rect x="29.6704%" y="469" width="0.0102%" height="15" fill="rgb(221,220,41)" fg:x="43474" fg:w="15"/><text x="29.9204%" y="479.50"></text></g><g><title>core::cell::BorrowRefMut::new (15 samples, 0.01%)</title><rect x="29.6704%" y="453" width="0.0102%" height="15" fill="rgb(218,133,21)" fg:x="43474" fg:w="15"/><text x="29.9204%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::basic_scheduler::RemoteMsg&gt;&gt; (26 samples, 0.02%)</title><rect x="29.6813%" y="469" width="0.0177%" height="15" fill="rgb(221,193,43)" fg:x="43490" fg:w="26"/><text x="29.9313%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;alloc::collections::vec_deque::VecDeque&lt;tokio::runtime::basic_scheduler::RemoteMsg&gt;&gt;&gt;&gt; (66 samples, 0.05%)</title><rect x="29.7209%" y="437" width="0.0450%" height="15" fill="rgb(240,128,52)" fg:x="43548" fg:w="66"/><text x="29.9709%" y="447.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.05%)</title><rect x="29.7209%" y="421" width="0.0450%" height="15" fill="rgb(253,114,12)" fg:x="43548" fg:w="66"/><text x="29.9709%" y="431.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (66 samples, 0.05%)</title><rect x="29.7209%" y="405" width="0.0450%" height="15" fill="rgb(215,223,47)" fg:x="43548" fg:w="66"/><text x="29.9709%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (64 samples, 0.04%)</title><rect x="29.7223%" y="389" width="0.0437%" height="15" fill="rgb(248,225,23)" fg:x="43550" fg:w="64"/><text x="29.9723%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.04%)</title><rect x="29.7223%" y="373" width="0.0437%" height="15" fill="rgb(250,108,0)" fg:x="43550" fg:w="64"/><text x="29.9723%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (183 samples, 0.12%)</title><rect x="29.6807%" y="485" width="0.1249%" height="15" fill="rgb(228,208,7)" fg:x="43489" fg:w="183"/><text x="29.9307%" y="495.50"></text></g><g><title>tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}}::{{closure}} (156 samples, 0.11%)</title><rect x="29.6991%" y="469" width="0.1065%" height="15" fill="rgb(244,45,10)" fg:x="43516" fg:w="156"/><text x="29.9491%" y="479.50"></text></g><g><title>tokio::runtime::basic_scheduler::Spawner::pop (155 samples, 0.11%)</title><rect x="29.6998%" y="453" width="0.1058%" height="15" fill="rgb(207,125,25)" fg:x="43517" fg:w="155"/><text x="29.9498%" y="463.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (58 samples, 0.04%)</title><rect x="29.7660%" y="437" width="0.0396%" height="15" fill="rgb(210,195,18)" fg:x="43614" fg:w="58"/><text x="30.0160%" y="447.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (58 samples, 0.04%)</title><rect x="29.7660%" y="421" width="0.0396%" height="15" fill="rgb(249,80,12)" fg:x="43614" fg:w="58"/><text x="30.0160%" y="431.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (58 samples, 0.04%)</title><rect x="29.7660%" y="405" width="0.0396%" height="15" fill="rgb(221,65,9)" fg:x="43614" fg:w="58"/><text x="30.0160%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (58 samples, 0.04%)</title><rect x="29.7660%" y="389" width="0.0396%" height="15" fill="rgb(235,49,36)" fg:x="43614" fg:w="58"/><text x="30.0160%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (58 samples, 0.04%)</title><rect x="29.7660%" y="373" width="0.0396%" height="15" fill="rgb(225,32,20)" fg:x="43614" fg:w="58"/><text x="30.0160%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (189 samples, 0.13%)</title><rect x="29.8056%" y="485" width="0.1290%" height="15" fill="rgb(215,141,46)" fg:x="43672" fg:w="189"/><text x="30.0556%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (22 samples, 0.02%)</title><rect x="29.9694%" y="405" width="0.0150%" height="15" fill="rgb(250,160,47)" fg:x="43912" fg:w="22"/><text x="30.2194%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (22 samples, 0.02%)</title><rect x="29.9694%" y="389" width="0.0150%" height="15" fill="rgb(216,222,40)" fg:x="43912" fg:w="22"/><text x="30.2194%" y="399.50"></text></g><g><title>core::mem::replace (22 samples, 0.02%)</title><rect x="29.9694%" y="373" width="0.0150%" height="15" fill="rgb(234,217,39)" fg:x="43912" fg:w="22"/><text x="30.2194%" y="383.50"></text></g><g><title>core::ptr::write (22 samples, 0.02%)</title><rect x="29.9694%" y="357" width="0.0150%" height="15" fill="rgb(207,178,40)" fg:x="43912" fg:w="22"/><text x="30.2194%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::with_budget::ResetGuard&gt; (17 samples, 0.01%)</title><rect x="29.9844%" y="405" width="0.0116%" height="15" fill="rgb(221,136,13)" fg:x="43934" fg:w="17"/><text x="30.2344%" y="415.50"></text></g><g><title>&lt;tokio::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="29.9851%" y="389" width="0.0109%" height="15" fill="rgb(249,199,10)" fg:x="43935" fg:w="16"/><text x="30.2351%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.02%)</title><rect x="30.0301%" y="357" width="0.0246%" height="15" fill="rgb(249,222,13)" fg:x="44001" fg:w="36"/><text x="30.2801%" y="367.50"></text></g><g><title>std::io::error::Error::kind (113 samples, 0.08%)</title><rect x="30.4942%" y="229" width="0.0771%" height="15" fill="rgb(244,185,38)" fg:x="44681" fg:w="113"/><text x="30.7442%" y="239.50"></text></g><g><title>std::sys::unix::decode_error_kind (33 samples, 0.02%)</title><rect x="30.5488%" y="213" width="0.0225%" height="15" fill="rgb(236,202,9)" fg:x="44761" fg:w="33"/><text x="30.7988%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (45 samples, 0.03%)</title><rect x="30.5713%" y="181" width="0.0307%" height="15" fill="rgb(250,229,37)" fg:x="44794" fg:w="45"/><text x="30.8213%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (45 samples, 0.03%)</title><rect x="30.5713%" y="165" width="0.0307%" height="15" fill="rgb(206,174,23)" fg:x="44794" fg:w="45"/><text x="30.8213%" y="175.50"></text></g><g><title>tokio::util::bit::Pack::pack (15 samples, 0.01%)</title><rect x="30.6034%" y="181" width="0.0102%" height="15" fill="rgb(211,33,43)" fg:x="44841" fg:w="15"/><text x="30.8534%" y="191.50"></text></g><g><title>tokio::io::driver::registration::Registration::clear_readiness (86 samples, 0.06%)</title><rect x="30.5713%" y="229" width="0.0587%" height="15" fill="rgb(245,58,50)" fg:x="44794" fg:w="86"/><text x="30.8213%" y="239.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::clear_readiness (86 samples, 0.06%)</title><rect x="30.5713%" y="213" width="0.0587%" height="15" fill="rgb(244,68,36)" fg:x="44794" fg:w="86"/><text x="30.8213%" y="223.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (86 samples, 0.06%)</title><rect x="30.5713%" y="197" width="0.0587%" height="15" fill="rgb(232,229,15)" fg:x="44794" fg:w="86"/><text x="30.8213%" y="207.50"></text></g><g><title>tokio::util::bit::Pack::unpack (24 samples, 0.02%)</title><rect x="30.6136%" y="181" width="0.0164%" height="15" fill="rgb(254,30,23)" fg:x="44856" fg:w="24"/><text x="30.8636%" y="191.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="30.6846%" y="213" width="0.0109%" height="15" fill="rgb(235,160,14)" fg:x="44960" fg:w="16"/><text x="30.9346%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::io::driver::Inner&gt;&gt;&gt; (45 samples, 0.03%)</title><rect x="30.6955%" y="213" width="0.0307%" height="15" fill="rgb(212,155,44)" fg:x="44976" fg:w="45"/><text x="30.9455%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::io::driver::Inner&gt;&gt; (45 samples, 0.03%)</title><rect x="30.6955%" y="197" width="0.0307%" height="15" fill="rgb(226,2,50)" fg:x="44976" fg:w="45"/><text x="30.9455%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.03%)</title><rect x="30.6955%" y="181" width="0.0307%" height="15" fill="rgb(234,177,6)" fg:x="44976" fg:w="45"/><text x="30.9455%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (45 samples, 0.03%)</title><rect x="30.6955%" y="165" width="0.0307%" height="15" fill="rgb(217,24,9)" fg:x="44976" fg:w="45"/><text x="30.9455%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (45 samples, 0.03%)</title><rect x="30.6955%" y="149" width="0.0307%" height="15" fill="rgb(220,13,46)" fg:x="44976" fg:w="45"/><text x="30.9455%" y="159.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop::{{closure}} (18 samples, 0.01%)</title><rect x="30.7262%" y="149" width="0.0123%" height="15" fill="rgb(239,221,27)" fg:x="45021" fg:w="18"/><text x="30.9762%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (18 samples, 0.01%)</title><rect x="30.7262%" y="133" width="0.0123%" height="15" fill="rgb(222,198,25)" fg:x="45021" fg:w="18"/><text x="30.9762%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (18 samples, 0.01%)</title><rect x="30.7262%" y="117" width="0.0123%" height="15" fill="rgb(211,99,13)" fg:x="45021" fg:w="18"/><text x="30.9762%" y="127.50"></text></g><g><title>core::mem::replace (18 samples, 0.01%)</title><rect x="30.7262%" y="101" width="0.0123%" height="15" fill="rgb(232,111,31)" fg:x="45021" fg:w="18"/><text x="30.9762%" y="111.50"></text></g><g><title>core::ptr::write (18 samples, 0.01%)</title><rect x="30.7262%" y="85" width="0.0123%" height="15" fill="rgb(245,82,37)" fg:x="45021" fg:w="18"/><text x="30.9762%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (35 samples, 0.02%)</title><rect x="30.7262%" y="213" width="0.0239%" height="15" fill="rgb(227,149,46)" fg:x="45021" fg:w="35"/><text x="30.9762%" y="223.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="30.7262%" y="197" width="0.0239%" height="15" fill="rgb(218,36,50)" fg:x="45021" fg:w="35"/><text x="30.9762%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35 samples, 0.02%)</title><rect x="30.7262%" y="181" width="0.0239%" height="15" fill="rgb(226,80,48)" fg:x="45021" fg:w="35"/><text x="30.9762%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (35 samples, 0.02%)</title><rect x="30.7262%" y="165" width="0.0239%" height="15" fill="rgb(238,224,15)" fg:x="45021" fg:w="35"/><text x="30.9762%" y="175.50"></text></g><g><title>tokio::coop::CURRENT::__getit (17 samples, 0.01%)</title><rect x="30.7385%" y="149" width="0.0116%" height="15" fill="rgb(241,136,10)" fg:x="45039" fg:w="17"/><text x="30.9885%" y="159.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="30.7385%" y="133" width="0.0116%" height="15" fill="rgb(208,32,45)" fg:x="45039" fg:w="17"/><text x="30.9885%" y="143.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="30.7385%" y="117" width="0.0116%" height="15" fill="rgb(207,135,9)" fg:x="45039" fg:w="17"/><text x="30.9885%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.01%)</title><rect x="30.7385%" y="101" width="0.0116%" height="15" fill="rgb(206,86,44)" fg:x="45039" fg:w="17"/><text x="30.9885%" y="111.50"></text></g><g><title>tokio::coop::CURRENT::__getit (25 samples, 0.02%)</title><rect x="30.7501%" y="165" width="0.0171%" height="15" fill="rgb(245,177,15)" fg:x="45056" fg:w="25"/><text x="31.0001%" y="175.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="30.7501%" y="149" width="0.0171%" height="15" fill="rgb(206,64,50)" fg:x="45056" fg:w="25"/><text x="31.0001%" y="159.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (70 samples, 0.05%)</title><rect x="30.7672%" y="165" width="0.0478%" height="15" fill="rgb(234,36,40)" fg:x="45081" fg:w="70"/><text x="31.0172%" y="175.50"></text></g><g><title>tokio::coop::Budget::decrement (22 samples, 0.02%)</title><rect x="30.7999%" y="149" width="0.0150%" height="15" fill="rgb(213,64,8)" fg:x="45129" fg:w="22"/><text x="31.0499%" y="159.50"></text></g><g><title>tokio::coop::poll_proceed (104 samples, 0.07%)</title><rect x="30.7501%" y="213" width="0.0710%" height="15" fill="rgb(210,75,36)" fg:x="45056" fg:w="104"/><text x="31.0001%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (104 samples, 0.07%)</title><rect x="30.7501%" y="197" width="0.0710%" height="15" fill="rgb(229,88,21)" fg:x="45056" fg:w="104"/><text x="31.0001%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (104 samples, 0.07%)</title><rect x="30.7501%" y="181" width="0.0710%" height="15" fill="rgb(252,204,47)" fg:x="45056" fg:w="104"/><text x="31.0001%" y="191.50"></text></g><g><title>tokio::io::driver::Handle::inner (52 samples, 0.04%)</title><rect x="30.8211%" y="213" width="0.0355%" height="15" fill="rgb(208,77,27)" fg:x="45160" fg:w="52"/><text x="31.0711%" y="223.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (52 samples, 0.04%)</title><rect x="30.8211%" y="197" width="0.0355%" height="15" fill="rgb(221,76,26)" fg:x="45160" fg:w="52"/><text x="31.0711%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (34 samples, 0.02%)</title><rect x="30.8334%" y="181" width="0.0232%" height="15" fill="rgb(225,139,18)" fg:x="45178" fg:w="34"/><text x="31.0834%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (34 samples, 0.02%)</title><rect x="30.8334%" y="165" width="0.0232%" height="15" fill="rgb(230,137,11)" fg:x="45178" fg:w="34"/><text x="31.0834%" y="175.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (41 samples, 0.03%)</title><rect x="30.9501%" y="197" width="0.0280%" height="15" fill="rgb(212,28,1)" fg:x="45349" fg:w="41"/><text x="31.2001%" y="207.50"></text></g><g><title>tokio::util::wake::clone_arc_raw (38 samples, 0.03%)</title><rect x="30.9521%" y="181" width="0.0259%" height="15" fill="rgb(248,164,17)" fg:x="45352" fg:w="38"/><text x="31.2021%" y="191.50"></text></g><g><title>tokio::util::wake::inc_ref_count (36 samples, 0.02%)</title><rect x="30.9535%" y="165" width="0.0246%" height="15" fill="rgb(222,171,42)" fg:x="45354" fg:w="36"/><text x="31.2035%" y="175.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (36 samples, 0.02%)</title><rect x="30.9535%" y="149" width="0.0246%" height="15" fill="rgb(243,84,45)" fg:x="45354" fg:w="36"/><text x="31.2035%" y="159.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (36 samples, 0.02%)</title><rect x="30.9535%" y="133" width="0.0246%" height="15" fill="rgb(252,49,23)" fg:x="45354" fg:w="36"/><text x="31.2035%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (36 samples, 0.02%)</title><rect x="30.9535%" y="117" width="0.0246%" height="15" fill="rgb(215,19,7)" fg:x="45354" fg:w="36"/><text x="31.2035%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_add (36 samples, 0.02%)</title><rect x="30.9535%" y="101" width="0.0246%" height="15" fill="rgb(238,81,41)" fg:x="45354" fg:w="36"/><text x="31.2035%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::io::driver::scheduled_io::Waiters&gt;&gt; (48 samples, 0.03%)</title><rect x="30.9849%" y="197" width="0.0328%" height="15" fill="rgb(210,199,37)" fg:x="45400" fg:w="48"/><text x="31.2349%" y="207.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.03%)</title><rect x="30.9849%" y="181" width="0.0328%" height="15" fill="rgb(244,192,49)" fg:x="45400" fg:w="48"/><text x="31.2349%" y="191.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (48 samples, 0.03%)</title><rect x="30.9849%" y="165" width="0.0328%" height="15" fill="rgb(226,211,11)" fg:x="45400" fg:w="48"/><text x="31.2349%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (46 samples, 0.03%)</title><rect x="30.9863%" y="149" width="0.0314%" height="15" fill="rgb(236,162,54)" fg:x="45402" fg:w="46"/><text x="31.2363%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.03%)</title><rect x="30.9863%" y="133" width="0.0314%" height="15" fill="rgb(220,229,9)" fg:x="45402" fg:w="46"/><text x="31.2363%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.01%)</title><rect x="31.0177%" y="197" width="0.0116%" height="15" fill="rgb(250,87,22)" fg:x="45448" fg:w="17"/><text x="31.2677%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="31.0177%" y="181" width="0.0116%" height="15" fill="rgb(239,43,17)" fg:x="45448" fg:w="17"/><text x="31.2677%" y="191.50"></text></g><g><title>tokio::io::driver::Direction::mask (16 samples, 0.01%)</title><rect x="31.0340%" y="197" width="0.0109%" height="15" fill="rgb(231,177,25)" fg:x="45472" fg:w="16"/><text x="31.2840%" y="207.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (26 samples, 0.02%)</title><rect x="31.0450%" y="197" width="0.0177%" height="15" fill="rgb(219,179,1)" fg:x="45488" fg:w="26"/><text x="31.2950%" y="207.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (26 samples, 0.02%)</title><rect x="31.0450%" y="181" width="0.0177%" height="15" fill="rgb(238,219,53)" fg:x="45488" fg:w="26"/><text x="31.2950%" y="191.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (26 samples, 0.02%)</title><rect x="31.0450%" y="165" width="0.0177%" height="15" fill="rgb(232,167,36)" fg:x="45488" fg:w="26"/><text x="31.2950%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (26 samples, 0.02%)</title><rect x="31.0450%" y="149" width="0.0177%" height="15" fill="rgb(244,19,51)" fg:x="45488" fg:w="26"/><text x="31.2950%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (26 samples, 0.02%)</title><rect x="31.0450%" y="133" width="0.0177%" height="15" fill="rgb(224,6,22)" fg:x="45488" fg:w="26"/><text x="31.2950%" y="143.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (638 samples, 0.44%)</title><rect x="30.6300%" y="229" width="0.4354%" height="15" fill="rgb(224,145,5)" fg:x="44880" fg:w="638"/><text x="30.8800%" y="239.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (306 samples, 0.21%)</title><rect x="30.8566%" y="213" width="0.2088%" height="15" fill="rgb(234,130,49)" fg:x="45212" fg:w="306"/><text x="31.1066%" y="223.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="41.7627%" y="69" width="0.0171%" height="15" fill="rgb(254,6,2)" fg:x="61192" fg:w="25"/><text x="42.0127%" y="79.50"></text></g><g><title>__pthread_disable_asynccancel (223 samples, 0.15%)</title><rect x="41.7798%" y="69" width="0.1522%" height="15" fill="rgb(208,96,46)" fg:x="61217" fg:w="223"/><text x="42.0298%" y="79.50"></text></g><g><title>__libc_recv (15,994 samples, 10.92%)</title><rect x="31.1057%" y="85" width="10.9157%" height="15" fill="rgb(239,3,39)" fg:x="45577" fg:w="15994"/><text x="31.3557%" y="95.50">__libc_recv</text></g><g><title>__pthread_enable_asynccancel (131 samples, 0.09%)</title><rect x="41.9320%" y="69" width="0.0894%" height="15" fill="rgb(233,210,1)" fg:x="61440" fg:w="131"/><text x="42.1820%" y="79.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (16,133 samples, 11.01%)</title><rect x="31.0654%" y="213" width="11.0106%" height="15" fill="rgb(244,137,37)" fg:x="45518" fg:w="16133"/><text x="31.3154%" y="223.50">&lt;&amp;mio::net::tcp:..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (16,132 samples, 11.01%)</title><rect x="31.0661%" y="197" width="11.0099%" height="15" fill="rgb(240,136,2)" fg:x="45519" fg:w="16132"/><text x="31.3161%" y="207.50">mio::io_source::..</text></g><g><title>mio::sys::unix::IoSourceState::do_io (16,132 samples, 11.01%)</title><rect x="31.0661%" y="181" width="11.0099%" height="15" fill="rgb(239,18,37)" fg:x="45519" fg:w="16132"/><text x="31.3161%" y="191.50">mio::sys::unix::..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (16,132 samples, 11.01%)</title><rect x="31.0661%" y="165" width="11.0099%" height="15" fill="rgb(218,185,22)" fg:x="45519" fg:w="16132"/><text x="31.3161%" y="175.50">&lt;&amp;mio::net::tcp:..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (16,125 samples, 11.01%)</title><rect x="31.0709%" y="149" width="11.0051%" height="15" fill="rgb(225,218,4)" fg:x="45526" fg:w="16125"/><text x="31.3209%" y="159.50">&lt;&amp;std::net::tcp:..</text></g><g><title>std::sys_common::net::TcpStream::read (16,086 samples, 10.98%)</title><rect x="31.0975%" y="133" width="10.9785%" height="15" fill="rgb(230,182,32)" fg:x="45565" fg:w="16086"/><text x="31.3475%" y="143.50">std::sys_common:..</text></g><g><title>std::sys::unix::net::Socket::read (16,086 samples, 10.98%)</title><rect x="31.0975%" y="117" width="10.9785%" height="15" fill="rgb(242,56,43)" fg:x="45565" fg:w="16086"/><text x="31.3475%" y="127.50">std::sys::unix::..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (16,086 samples, 10.98%)</title><rect x="31.0975%" y="101" width="10.9785%" height="15" fill="rgb(233,99,24)" fg:x="45565" fg:w="16086"/><text x="31.3475%" y="111.50">std::sys::unix::..</text></g><g><title>std::sys::unix::cvt (80 samples, 0.05%)</title><rect x="42.0214%" y="85" width="0.0546%" height="15" fill="rgb(234,209,42)" fg:x="61571" fg:w="80"/><text x="42.2714%" y="95.50"></text></g><g><title>std::io::error::Error::last_os_error (58 samples, 0.04%)</title><rect x="42.0364%" y="69" width="0.0396%" height="15" fill="rgb(227,7,12)" fg:x="61593" fg:w="58"/><text x="42.2864%" y="79.50"></text></g><g><title>std::sys::unix::os::errno (58 samples, 0.04%)</title><rect x="42.0364%" y="53" width="0.0396%" height="15" fill="rgb(245,203,43)" fg:x="61593" fg:w="58"/><text x="42.2864%" y="63.50"></text></g><g><title>__errno_location (51 samples, 0.03%)</title><rect x="42.0412%" y="37" width="0.0348%" height="15" fill="rgb(238,205,33)" fg:x="61600" fg:w="51"/><text x="42.2912%" y="47.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (17,154 samples, 11.71%)</title><rect x="30.3925%" y="245" width="11.7074%" height="15" fill="rgb(231,56,7)" fg:x="44532" fg:w="17154"/><text x="30.6425%" y="255.50">tokio::io::driver..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (16,168 samples, 11.03%)</title><rect x="31.0654%" y="229" width="11.0344%" height="15" fill="rgb(244,186,29)" fg:x="45518" fg:w="16168"/><text x="31.3154%" y="239.50">tokio::io::poll_..</text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (30 samples, 0.02%)</title><rect x="42.0794%" y="213" width="0.0205%" height="15" fill="rgb(234,111,31)" fg:x="61656" fg:w="30"/><text x="42.3294%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (30 samples, 0.02%)</title><rect x="42.0794%" y="197" width="0.0205%" height="15" fill="rgb(241,149,10)" fg:x="61656" fg:w="30"/><text x="42.3294%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (30 samples, 0.02%)</title><rect x="42.0794%" y="181" width="0.0205%" height="15" fill="rgb(249,206,44)" fg:x="61656" fg:w="30"/><text x="42.3294%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (29 samples, 0.02%)</title><rect x="42.0801%" y="165" width="0.0198%" height="15" fill="rgb(251,153,30)" fg:x="61657" fg:w="29"/><text x="42.3301%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (29 samples, 0.02%)</title><rect x="42.0801%" y="149" width="0.0198%" height="15" fill="rgb(239,152,38)" fg:x="61657" fg:w="29"/><text x="42.3301%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (29 samples, 0.02%)</title><rect x="42.0801%" y="133" width="0.0198%" height="15" fill="rgb(249,139,47)" fg:x="61657" fg:w="29"/><text x="42.3301%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (29 samples, 0.02%)</title><rect x="42.0801%" y="117" width="0.0198%" height="15" fill="rgb(244,64,35)" fg:x="61657" fg:w="29"/><text x="42.3301%" y="127.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (17,238 samples, 11.76%)</title><rect x="30.3359%" y="261" width="11.7647%" height="15" fill="rgb(216,46,15)" fg:x="44449" fg:w="17238"/><text x="30.5859%" y="271.50">tokio::io::driver..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (17,452 samples, 11.91%)</title><rect x="30.2144%" y="325" width="11.9108%" height="15" fill="rgb(250,74,19)" fg:x="44271" fg:w="17452"/><text x="30.4644%" y="335.50">&lt;&amp;mut T as tokio::..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (17,422 samples, 11.89%)</title><rect x="30.2348%" y="309" width="11.8903%" height="15" fill="rgb(249,42,33)" fg:x="44301" fg:w="17422"/><text x="30.4848%" y="319.50">&lt;tokio::net::tcp::..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (17,364 samples, 11.85%)</title><rect x="30.2744%" y="293" width="11.8507%" height="15" fill="rgb(242,149,17)" fg:x="44359" fg:w="17364"/><text x="30.5244%" y="303.50">tokio::net::tcp::s..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (17,350 samples, 11.84%)</title><rect x="30.2840%" y="277" width="11.8411%" height="15" fill="rgb(244,29,21)" fg:x="44373" fg:w="17350"/><text x="30.5340%" y="287.50">tokio::io::poll_ev..</text></g><g><title>tokio::io::read_buf::ReadBuf::assume_init (31 samples, 0.02%)</title><rect x="42.1040%" y="261" width="0.0212%" height="15" fill="rgb(220,130,37)" fg:x="61692" fg:w="31"/><text x="42.3540%" y="271.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (17,592 samples, 12.01%)</title><rect x="30.1543%" y="341" width="12.0063%" height="15" fill="rgb(211,67,2)" fg:x="44183" fg:w="17592"/><text x="30.4043%" y="351.50">&lt;tokio::io::util::..</text></g><g><title>tokio::io::util::read_exact::_::&lt;impl tokio::io::util::read_exact::ReadExact&lt;A&gt;&gt;::project (46 samples, 0.03%)</title><rect x="42.1292%" y="325" width="0.0314%" height="15" fill="rgb(235,68,52)" fg:x="61729" fg:w="46"/><text x="42.3792%" y="335.50"></text></g><g><title>tokio::coop::CURRENT::__getit (20 samples, 0.01%)</title><rect x="42.4896%" y="165" width="0.0136%" height="15" fill="rgb(246,142,3)" fg:x="62257" fg:w="20"/><text x="42.7396%" y="175.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (20 samples, 0.01%)</title><rect x="42.4896%" y="149" width="0.0136%" height="15" fill="rgb(241,25,7)" fg:x="62257" fg:w="20"/><text x="42.7396%" y="159.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="42.4923%" y="133" width="0.0109%" height="15" fill="rgb(242,119,39)" fg:x="62261" fg:w="16"/><text x="42.7423%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (16 samples, 0.01%)</title><rect x="42.4923%" y="117" width="0.0109%" height="15" fill="rgb(241,98,45)" fg:x="62261" fg:w="16"/><text x="42.7423%" y="127.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (27 samples, 0.02%)</title><rect x="42.5032%" y="165" width="0.0184%" height="15" fill="rgb(254,28,30)" fg:x="62277" fg:w="27"/><text x="42.7532%" y="175.50"></text></g><g><title>tokio::coop::poll_proceed (48 samples, 0.03%)</title><rect x="42.4896%" y="213" width="0.0328%" height="15" fill="rgb(241,142,54)" fg:x="62257" fg:w="48"/><text x="42.7396%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (48 samples, 0.03%)</title><rect x="42.4896%" y="197" width="0.0328%" height="15" fill="rgb(222,85,15)" fg:x="62257" fg:w="48"/><text x="42.7396%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (48 samples, 0.03%)</title><rect x="42.4896%" y="181" width="0.0328%" height="15" fill="rgb(210,85,47)" fg:x="62257" fg:w="48"/><text x="42.7396%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (19 samples, 0.01%)</title><rect x="42.5496%" y="197" width="0.0130%" height="15" fill="rgb(224,206,25)" fg:x="62345" fg:w="19"/><text x="42.7996%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.01%)</title><rect x="42.5496%" y="181" width="0.0130%" height="15" fill="rgb(243,201,19)" fg:x="62345" fg:w="19"/><text x="42.7996%" y="191.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (150 samples, 0.10%)</title><rect x="42.4609%" y="229" width="0.1024%" height="15" fill="rgb(236,59,4)" fg:x="62215" fg:w="150"/><text x="42.7109%" y="239.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (47 samples, 0.03%)</title><rect x="42.5312%" y="213" width="0.0321%" height="15" fill="rgb(254,179,45)" fg:x="62318" fg:w="47"/><text x="42.7812%" y="223.50"></text></g><g><title>__pthread_disable_asynccancel (158 samples, 0.11%)</title><rect x="97.2701%" y="101" width="0.1078%" height="15" fill="rgb(226,14,10)" fg:x="142523" fg:w="158"/><text x="97.5201%" y="111.50"></text></g><g><title>__libc_send (80,267 samples, 54.78%)</title><rect x="42.6261%" y="117" width="54.7812%" height="15" fill="rgb(244,27,41)" fg:x="62457" fg:w="80267"/><text x="42.8761%" y="127.50">__libc_send</text></g><g><title>__pthread_enable_asynccancel (43 samples, 0.03%)</title><rect x="97.3779%" y="101" width="0.0293%" height="15" fill="rgb(235,35,32)" fg:x="142681" fg:w="43"/><text x="97.6279%" y="111.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (80,812 samples, 55.15%)</title><rect x="42.2644%" y="325" width="55.1531%" height="15" fill="rgb(218,68,31)" fg:x="61927" fg:w="80812"/><text x="42.5144%" y="335.50">&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (80,804 samples, 55.15%)</title><rect x="42.2698%" y="309" width="55.1477%" height="15" fill="rgb(207,120,37)" fg:x="61935" fg:w="80804"/><text x="42.5198%" y="319.50">&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (80,711 samples, 55.08%)</title><rect x="42.3333%" y="293" width="55.0842%" height="15" fill="rgb(227,98,0)" fg:x="62028" fg:w="80711"/><text x="42.5833%" y="303.50">tokio::net::tcp::stream::TcpStream::poll_write_priv</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (80,711 samples, 55.08%)</title><rect x="42.3333%" y="277" width="55.0842%" height="15" fill="rgb(207,7,3)" fg:x="62028" fg:w="80711"/><text x="42.5833%" y="287.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write</text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (80,711 samples, 55.08%)</title><rect x="42.3333%" y="261" width="55.0842%" height="15" fill="rgb(206,98,19)" fg:x="62028" fg:w="80711"/><text x="42.5833%" y="271.50">tokio::io::driver::registration::Registration::poll_write_io</text></g><g><title>tokio::io::driver::registration::Registration::poll_io (80,677 samples, 55.06%)</title><rect x="42.3565%" y="245" width="55.0610%" height="15" fill="rgb(217,5,26)" fg:x="62062" fg:w="80677"/><text x="42.6065%" y="255.50">tokio::io::driver::registration::Registration::poll_io</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write::{{closure}} (80,374 samples, 54.85%)</title><rect x="42.5633%" y="229" width="54.8542%" height="15" fill="rgb(235,190,38)" fg:x="62365" fg:w="80374"/><text x="42.8133%" y="239.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write::{{closure}}</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (80,355 samples, 54.84%)</title><rect x="42.5763%" y="213" width="54.8412%" height="15" fill="rgb(247,86,24)" fg:x="62384" fg:w="80355"/><text x="42.8263%" y="223.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (80,302 samples, 54.81%)</title><rect x="42.6124%" y="197" width="54.8050%" height="15" fill="rgb(205,101,16)" fg:x="62437" fg:w="80302"/><text x="42.8624%" y="207.50">mio::io_source::IoSource&lt;T&gt;::do_io</text></g><g><title>mio::sys::unix::IoSourceState::do_io (80,302 samples, 54.81%)</title><rect x="42.6124%" y="181" width="54.8050%" height="15" fill="rgb(246,168,33)" fg:x="62437" fg:w="80302"/><text x="42.8624%" y="191.50">mio::sys::unix::IoSourceState::do_io</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (80,302 samples, 54.81%)</title><rect x="42.6124%" y="165" width="54.8050%" height="15" fill="rgb(231,114,1)" fg:x="62437" fg:w="80302"/><text x="42.8624%" y="175.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}}</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (80,302 samples, 54.81%)</title><rect x="42.6124%" y="149" width="54.8050%" height="15" fill="rgb(207,184,53)" fg:x="62437" fg:w="80302"/><text x="42.8624%" y="159.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write</text></g><g><title>std::sys_common::net::TcpStream::write (80,293 samples, 54.80%)</title><rect x="42.6186%" y="133" width="54.7989%" height="15" fill="rgb(224,95,51)" fg:x="62446" fg:w="80293"/><text x="42.8686%" y="143.50">std::sys_common::net::TcpStream::write</text></g><g><title>std::sys::unix::cvt (15 samples, 0.01%)</title><rect x="97.4072%" y="117" width="0.0102%" height="15" fill="rgb(212,188,45)" fg:x="142724" fg:w="15"/><text x="97.6572%" y="127.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (15 samples, 0.01%)</title><rect x="97.4072%" y="101" width="0.0102%" height="15" fill="rgb(223,154,38)" fg:x="142724" fg:w="15"/><text x="97.6572%" y="111.50"></text></g><g><title>core::ptr::read (30 samples, 0.02%)</title><rect x="97.4195%" y="309" width="0.0205%" height="15" fill="rgb(251,22,52)" fg:x="142742" fg:w="30"/><text x="97.6695%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.02%)</title><rect x="97.4195%" y="293" width="0.0205%" height="15" fill="rgb(229,209,22)" fg:x="142742" fg:w="30"/><text x="97.6695%" y="303.50"></text></g><g><title>core::mem::replace (31 samples, 0.02%)</title><rect x="97.4195%" y="325" width="0.0212%" height="15" fill="rgb(234,138,34)" fg:x="142742" fg:w="31"/><text x="97.6695%" y="335.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (81,011 samples, 55.29%)</title><rect x="42.1606%" y="341" width="55.2889%" height="15" fill="rgb(212,95,11)" fg:x="61775" fg:w="81011"/><text x="42.4106%" y="351.50">&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (98,852 samples, 67.47%)</title><rect x="29.9960%" y="373" width="67.4652%" height="15" fill="rgb(240,179,47)" fg:x="43951" fg:w="98852"/><text x="30.2460%" y="383.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::main::{{closure}}::{{closure}} (98,766 samples, 67.41%)</title><rect x="30.0547%" y="357" width="67.4065%" height="15" fill="rgb(240,163,11)" fg:x="44037" fg:w="98766"/><text x="30.3047%" y="367.50">tokio::main::{{closure}}::{{closure}}</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (17 samples, 0.01%)</title><rect x="97.4495%" y="341" width="0.0116%" height="15" fill="rgb(236,37,12)" fg:x="142786" fg:w="17"/><text x="97.6995%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (17 samples, 0.01%)</title><rect x="97.4495%" y="325" width="0.0116%" height="15" fill="rgb(232,164,16)" fg:x="142786" fg:w="17"/><text x="97.6995%" y="335.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (98,938 samples, 67.52%)</title><rect x="29.9462%" y="421" width="67.5239%" height="15" fill="rgb(244,205,15)" fg:x="43878" fg:w="98938"/><text x="30.1962%" y="431.50">tokio::coop::with_budget::{{closure}}</text></g><g><title>tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}}::{{closure}} (98,865 samples, 67.47%)</title><rect x="29.9960%" y="405" width="67.4740%" height="15" fill="rgb(223,117,47)" fg:x="43951" fg:w="98865"/><text x="30.2460%" y="415.50">tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}}::{{closure}}</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (98,865 samples, 67.47%)</title><rect x="29.9960%" y="389" width="67.4740%" height="15" fill="rgb(244,107,35)" fg:x="43951" fg:w="98865"/><text x="30.2460%" y="399.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::coop::budget (98,967 samples, 67.54%)</title><rect x="29.9345%" y="485" width="67.5437%" height="15" fill="rgb(205,140,8)" fg:x="43861" fg:w="98967"/><text x="30.1845%" y="495.50">tokio::coop::budget</text></g><g><title>tokio::coop::with_budget (98,958 samples, 67.54%)</title><rect x="29.9407%" y="469" width="67.5375%" height="15" fill="rgb(228,84,46)" fg:x="43870" fg:w="98958"/><text x="30.1907%" y="479.50">tokio::coop::with_budget</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (98,958 samples, 67.54%)</title><rect x="29.9407%" y="453" width="67.5375%" height="15" fill="rgb(254,188,9)" fg:x="43870" fg:w="98958"/><text x="30.1907%" y="463.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (98,958 samples, 67.54%)</title><rect x="29.9407%" y="437" width="67.5375%" height="15" fill="rgb(206,112,54)" fg:x="43870" fg:w="98958"/><text x="30.1907%" y="447.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (31 samples, 0.02%)</title><rect x="97.4782%" y="485" width="0.0212%" height="15" fill="rgb(216,84,49)" fg:x="142828" fg:w="31"/><text x="97.7282%" y="495.50"></text></g><g><title>tokio::runtime::Runtime::block_on (140,814 samples, 96.10%)</title><rect x="1.5404%" y="613" width="96.1037%" height="15" fill="rgb(214,194,35)" fg:x="2257" fg:w="140814"/><text x="1.7904%" y="623.50">tokio::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (140,814 samples, 96.10%)</title><rect x="1.5404%" y="597" width="96.1037%" height="15" fill="rgb(249,28,3)" fg:x="2257" fg:w="140814"/><text x="1.7904%" y="607.50">tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on</text></g><g><title>tokio::runtime::basic_scheduler::InnerGuard&lt;P&gt;::block_on (140,814 samples, 96.10%)</title><rect x="1.5404%" y="581" width="96.1037%" height="15" fill="rgb(222,56,52)" fg:x="2257" fg:w="140814"/><text x="1.7904%" y="591.50">tokio::runtime::basic_scheduler::InnerGuard&lt;P&gt;::block_on</text></g><g><title>tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on (140,814 samples, 96.10%)</title><rect x="1.5404%" y="565" width="96.1037%" height="15" fill="rgb(245,217,50)" fg:x="2257" fg:w="140814"/><text x="1.7904%" y="575.50">tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on</text></g><g><title>tokio::runtime::basic_scheduler::enter (140,814 samples, 96.10%)</title><rect x="1.5404%" y="549" width="96.1037%" height="15" fill="rgb(213,201,24)" fg:x="2257" fg:w="140814"/><text x="1.7904%" y="559.50">tokio::runtime::basic_scheduler::enter</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (140,814 samples, 96.10%)</title><rect x="1.5404%" y="533" width="96.1037%" height="15" fill="rgb(248,116,28)" fg:x="2257" fg:w="140814"/><text x="1.7904%" y="543.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::basic_scheduler::enter::{{closure}} (140,814 samples, 96.10%)</title><rect x="1.5404%" y="517" width="96.1037%" height="15" fill="rgb(219,72,43)" fg:x="2257" fg:w="140814"/><text x="1.7904%" y="527.50">tokio::runtime::basic_scheduler::enter::{{closure}}</text></g><g><title>tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}} (140,776 samples, 96.08%)</title><rect x="1.5663%" y="501" width="96.0777%" height="15" fill="rgb(209,138,14)" fg:x="2295" fg:w="140776"/><text x="1.8163%" y="511.50">tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}}</text></g><g><title>tokio::runtime::basic_scheduler::Spawner::was_woken (207 samples, 0.14%)</title><rect x="97.5028%" y="485" width="0.1413%" height="15" fill="rgb(222,18,33)" fg:x="142864" fg:w="207"/><text x="97.7528%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (81 samples, 0.06%)</title><rect x="97.5888%" y="469" width="0.0553%" height="15" fill="rgb(213,199,7)" fg:x="142990" fg:w="81"/><text x="97.8388%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (70 samples, 0.05%)</title><rect x="97.5963%" y="453" width="0.0478%" height="15" fill="rgb(250,110,10)" fg:x="143001" fg:w="70"/><text x="97.8463%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (140,820 samples, 96.11%)</title><rect x="1.5370%" y="789" width="96.1078%" height="15" fill="rgb(248,123,6)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="799.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (140,820 samples, 96.11%)</title><rect x="1.5370%" y="773" width="96.1078%" height="15" fill="rgb(206,91,31)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="783.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (140,820 samples, 96.11%)</title><rect x="1.5370%" y="757" width="96.1078%" height="15" fill="rgb(211,154,13)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="767.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (140,820 samples, 96.11%)</title><rect x="1.5370%" y="741" width="96.1078%" height="15" fill="rgb(225,148,7)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="751.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (140,820 samples, 96.11%)</title><rect x="1.5370%" y="725" width="96.1078%" height="15" fill="rgb(220,160,43)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (140,820 samples, 96.11%)</title><rect x="1.5370%" y="709" width="96.1078%" height="15" fill="rgb(213,52,39)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (140,820 samples, 96.11%)</title><rect x="1.5370%" y="693" width="96.1078%" height="15" fill="rgb(243,137,7)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="703.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (140,820 samples, 96.11%)</title><rect x="1.5370%" y="677" width="96.1078%" height="15" fill="rgb(230,79,13)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="687.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (140,820 samples, 96.11%)</title><rect x="1.5370%" y="661" width="96.1078%" height="15" fill="rgb(247,105,23)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="671.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (140,820 samples, 96.11%)</title><rect x="1.5370%" y="645" width="96.1078%" height="15" fill="rgb(223,179,41)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::main::{{closure}} (140,820 samples, 96.11%)</title><rect x="1.5370%" y="629" width="96.1078%" height="15" fill="rgb(218,9,34)" fg:x="2252" fg:w="140820"/><text x="1.7870%" y="639.50">tokio::main::{{closure}}</text></g><g><title>__GI___clone (140,831 samples, 96.12%)</title><rect x="1.5301%" y="837" width="96.1153%" height="15" fill="rgb(222,106,8)" fg:x="2242" fg:w="140831"/><text x="1.7801%" y="847.50">__GI___clone</text></g><g><title>start_thread (140,821 samples, 96.11%)</title><rect x="1.5370%" y="821" width="96.1085%" height="15" fill="rgb(211,220,0)" fg:x="2252" fg:w="140821"/><text x="1.7870%" y="831.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (140,821 samples, 96.11%)</title><rect x="1.5370%" y="805" width="96.1085%" height="15" fill="rgb(229,52,16)" fg:x="2252" fg:w="140821"/><text x="1.7870%" y="815.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>__libc_write (46 samples, 0.03%)</title><rect x="97.6563%" y="837" width="0.0314%" height="15" fill="rgb(212,155,18)" fg:x="143089" fg:w="46"/><text x="97.9063%" y="847.50"></text></g><g><title>__vdso_clock_gettime (105 samples, 0.07%)</title><rect x="97.6877%" y="837" width="0.0717%" height="15" fill="rgb(242,21,14)" fg:x="143135" fg:w="105"/><text x="97.9377%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (189 samples, 0.13%)</title><rect x="97.7655%" y="837" width="0.1290%" height="15" fill="rgb(222,19,48)" fg:x="143249" fg:w="189"/><text x="98.0155%" y="847.50"></text></g><g><title>mio::poll::Poll::poll (63 samples, 0.04%)</title><rect x="97.9157%" y="837" width="0.0430%" height="15" fill="rgb(232,45,27)" fg:x="143469" fg:w="63"/><text x="98.1657%" y="847.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (17 samples, 0.01%)</title><rect x="97.9471%" y="821" width="0.0116%" height="15" fill="rgb(249,103,42)" fg:x="143515" fg:w="17"/><text x="98.1971%" y="831.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (163 samples, 0.11%)</title><rect x="97.9587%" y="837" width="0.1112%" height="15" fill="rgb(246,81,33)" fg:x="143532" fg:w="163"/><text x="98.2087%" y="847.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (57 samples, 0.04%)</title><rect x="98.0699%" y="837" width="0.0389%" height="15" fill="rgb(252,33,42)" fg:x="143695" fg:w="57"/><text x="98.3199%" y="847.50"></text></g><g><title>std::time::Instant::now (112 samples, 0.08%)</title><rect x="98.1088%" y="837" width="0.0764%" height="15" fill="rgb(209,212,41)" fg:x="143752" fg:w="112"/><text x="98.3588%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (112 samples, 0.08%)</title><rect x="98.1088%" y="821" width="0.0764%" height="15" fill="rgb(207,154,6)" fg:x="143752" fg:w="112"/><text x="98.3588%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::now (112 samples, 0.08%)</title><rect x="98.1088%" y="805" width="0.0764%" height="15" fill="rgb(223,64,47)" fg:x="143752" fg:w="112"/><text x="98.3588%" y="815.50"></text></g><g><title>tokio::coop::Budget::initial (18 samples, 0.01%)</title><rect x="98.1853%" y="837" width="0.0123%" height="15" fill="rgb(211,161,38)" fg:x="143864" fg:w="18"/><text x="98.4353%" y="847.50"></text></g><g><title>tokio::coop::CURRENT::__getit (24 samples, 0.02%)</title><rect x="98.1976%" y="837" width="0.0164%" height="15" fill="rgb(219,138,40)" fg:x="143882" fg:w="24"/><text x="98.4476%" y="847.50"></text></g><g><title>tokio::io::driver::Driver::turn (260 samples, 0.18%)</title><rect x="98.2139%" y="837" width="0.1774%" height="15" fill="rgb(241,228,46)" fg:x="143906" fg:w="260"/><text x="98.4639%" y="847.50"></text></g><g><title>tokio::io::driver::ready::Ready::from_mio (74 samples, 0.05%)</title><rect x="98.3409%" y="821" width="0.0505%" height="15" fill="rgb(223,209,38)" fg:x="144092" fg:w="74"/><text x="98.5909%" y="831.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (140 samples, 0.10%)</title><rect x="98.3914%" y="837" width="0.0955%" height="15" fill="rgb(236,164,45)" fg:x="144166" fg:w="140"/><text x="98.6414%" y="847.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (56 samples, 0.04%)</title><rect x="98.4487%" y="821" width="0.0382%" height="15" fill="rgb(231,15,5)" fg:x="144250" fg:w="56"/><text x="98.6987%" y="831.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (16 samples, 0.01%)</title><rect x="98.4760%" y="805" width="0.0109%" height="15" fill="rgb(252,35,15)" fg:x="144290" fg:w="16"/><text x="98.7260%" y="815.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (304 samples, 0.21%)</title><rect x="98.4869%" y="837" width="0.2075%" height="15" fill="rgb(248,181,18)" fg:x="144306" fg:w="304"/><text x="98.7369%" y="847.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (119 samples, 0.08%)</title><rect x="98.6944%" y="837" width="0.0812%" height="15" fill="rgb(233,39,42)" fg:x="144610" fg:w="119"/><text x="98.9444%" y="847.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (19 samples, 0.01%)</title><rect x="98.7627%" y="821" width="0.0130%" height="15" fill="rgb(238,110,33)" fg:x="144710" fg:w="19"/><text x="99.0127%" y="831.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (230 samples, 0.16%)</title><rect x="98.7756%" y="837" width="0.1570%" height="15" fill="rgb(233,195,10)" fg:x="144729" fg:w="230"/><text x="99.0256%" y="847.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (103 samples, 0.07%)</title><rect x="98.9326%" y="837" width="0.0703%" height="15" fill="rgb(254,105,3)" fg:x="144959" fg:w="103"/><text x="99.1826%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (47 samples, 0.03%)</title><rect x="99.0275%" y="789" width="0.0321%" height="15" fill="rgb(221,225,9)" fg:x="145098" fg:w="47"/><text x="99.2775%" y="799.50"></text></g><g><title>tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}}::{{closure}} (47 samples, 0.03%)</title><rect x="99.0275%" y="773" width="0.0321%" height="15" fill="rgb(224,227,45)" fg:x="145098" fg:w="47"/><text x="99.2775%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::with_budget::ResetGuard&gt; (58 samples, 0.04%)</title><rect x="99.0595%" y="709" width="0.0396%" height="15" fill="rgb(229,198,43)" fg:x="145145" fg:w="58"/><text x="99.3095%" y="719.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (157 samples, 0.11%)</title><rect x="99.0029%" y="837" width="0.1072%" height="15" fill="rgb(206,209,35)" fg:x="145062" fg:w="157"/><text x="99.2529%" y="847.50"></text></g><g><title>tokio::runtime::basic_scheduler::enter::{{closure}} (157 samples, 0.11%)</title><rect x="99.0029%" y="821" width="0.1072%" height="15" fill="rgb(245,195,53)" fg:x="145062" fg:w="157"/><text x="99.2529%" y="831.50"></text></g><g><title>tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}} (157 samples, 0.11%)</title><rect x="99.0029%" y="805" width="0.1072%" height="15" fill="rgb(240,92,26)" fg:x="145062" fg:w="157"/><text x="99.2529%" y="815.50"></text></g><g><title>tokio::coop::budget (74 samples, 0.05%)</title><rect x="99.0595%" y="789" width="0.0505%" height="15" fill="rgb(207,40,23)" fg:x="145145" fg:w="74"/><text x="99.3095%" y="799.50"></text></g><g><title>tokio::coop::with_budget (74 samples, 0.05%)</title><rect x="99.0595%" y="773" width="0.0505%" height="15" fill="rgb(223,111,35)" fg:x="145145" fg:w="74"/><text x="99.3095%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (74 samples, 0.05%)</title><rect x="99.0595%" y="757" width="0.0505%" height="15" fill="rgb(229,147,28)" fg:x="145145" fg:w="74"/><text x="99.3095%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (74 samples, 0.05%)</title><rect x="99.0595%" y="741" width="0.0505%" height="15" fill="rgb(211,29,28)" fg:x="145145" fg:w="74"/><text x="99.3095%" y="751.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (74 samples, 0.05%)</title><rect x="99.0595%" y="725" width="0.0505%" height="15" fill="rgb(228,72,33)" fg:x="145145" fg:w="74"/><text x="99.3095%" y="735.50"></text></g><g><title>tokio::runtime::basic_scheduler::Inner&lt;P&gt;::block_on::{{closure}}::{{closure}} (16 samples, 0.01%)</title><rect x="99.0991%" y="709" width="0.0109%" height="15" fill="rgb(205,214,31)" fg:x="145203" fg:w="16"/><text x="99.3491%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="99.0991%" y="693" width="0.0109%" height="15" fill="rgb(224,111,15)" fg:x="145203" fg:w="16"/><text x="99.3491%" y="703.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (135 samples, 0.09%)</title><rect x="99.1100%" y="837" width="0.0921%" height="15" fill="rgb(253,21,26)" fg:x="145219" fg:w="135"/><text x="99.3600%" y="847.50"></text></g><g><title>tokio::runtime::basic_scheduler::Spawner::pop (28 samples, 0.02%)</title><rect x="99.2022%" y="837" width="0.0191%" height="15" fill="rgb(245,139,43)" fg:x="145354" fg:w="28"/><text x="99.4522%" y="847.50"></text></g><g><title>tokio::signal::registry::globals::GLOBALS (16 samples, 0.01%)</title><rect x="99.2213%" y="837" width="0.0109%" height="15" fill="rgb(252,170,7)" fg:x="145382" fg:w="16"/><text x="99.4713%" y="847.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (16 samples, 0.01%)</title><rect x="99.2213%" y="821" width="0.0109%" height="15" fill="rgb(231,118,14)" fg:x="145382" fg:w="16"/><text x="99.4713%" y="831.50"></text></g><g><title>tokio::signal::unix::driver::Driver::process (205 samples, 0.14%)</title><rect x="99.2322%" y="837" width="0.1399%" height="15" fill="rgb(238,83,0)" fg:x="145398" fg:w="205"/><text x="99.4822%" y="847.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_ready (17 samples, 0.01%)</title><rect x="99.3605%" y="821" width="0.0116%" height="15" fill="rgb(221,39,39)" fg:x="145586" fg:w="17"/><text x="99.6105%" y="831.50"></text></g><g><title>tokio::signal::unix::driver::noop (46 samples, 0.03%)</title><rect x="99.3721%" y="837" width="0.0314%" height="15" fill="rgb(222,119,46)" fg:x="145603" fg:w="46"/><text x="99.6221%" y="847.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (113 samples, 0.08%)</title><rect x="99.4929%" y="821" width="0.0771%" height="15" fill="rgb(222,165,49)" fg:x="145780" fg:w="113"/><text x="99.7429%" y="831.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (113 samples, 0.08%)</title><rect x="99.4929%" y="805" width="0.0771%" height="15" fill="rgb(219,113,52)" fg:x="145780" fg:w="113"/><text x="99.7429%" y="815.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (284 samples, 0.19%)</title><rect x="99.4035%" y="837" width="0.1938%" height="15" fill="rgb(214,7,15)" fg:x="145649" fg:w="284"/><text x="99.6535%" y="847.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll_at (40 samples, 0.03%)</title><rect x="99.5700%" y="821" width="0.0273%" height="15" fill="rgb(235,32,4)" fg:x="145893" fg:w="40"/><text x="99.8200%" y="831.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (40 samples, 0.03%)</title><rect x="99.5700%" y="805" width="0.0273%" height="15" fill="rgb(238,90,54)" fg:x="145893" fg:w="40"/><text x="99.8200%" y="815.50"></text></g><g><title>tokio::time::clock::Clock::now (19 samples, 0.01%)</title><rect x="99.6977%" y="789" width="0.0130%" height="15" fill="rgb(213,208,19)" fg:x="146080" fg:w="19"/><text x="99.9477%" y="799.50"></text></g><g><title>tokio::time::clock::now (19 samples, 0.01%)</title><rect x="99.6977%" y="773" width="0.0130%" height="15" fill="rgb(233,156,4)" fg:x="146080" fg:w="19"/><text x="99.9477%" y="783.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (179 samples, 0.12%)</title><rect x="99.5973%" y="837" width="0.1222%" height="15" fill="rgb(207,194,5)" fg:x="145933" fg:w="179"/><text x="99.8473%" y="847.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (49 samples, 0.03%)</title><rect x="99.6861%" y="821" width="0.0334%" height="15" fill="rgb(206,111,30)" fg:x="146063" fg:w="49"/><text x="99.9361%" y="831.50"></text></g><g><title>tokio::time::driver::ClockTime::now (32 samples, 0.02%)</title><rect x="99.6977%" y="805" width="0.0218%" height="15" fill="rgb(243,70,54)" fg:x="146080" fg:w="32"/><text x="99.9477%" y="815.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (77 samples, 0.05%)</title><rect x="99.7195%" y="837" width="0.0526%" height="15" fill="rgb(242,28,8)" fg:x="146112" fg:w="77"/><text x="99.9695%" y="847.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (77 samples, 0.05%)</title><rect x="99.7195%" y="821" width="0.0526%" height="15" fill="rgb(219,106,18)" fg:x="146112" fg:w="77"/><text x="99.9695%" y="831.50"></text></g><g><title>all (146,523 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(244,222,10)" fg:x="0" fg:w="146523"/><text x="0.2500%" y="879.50"></text></g><g><title>tokio (146,523 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(236,179,52)" fg:x="0" fg:w="146523"/><text x="0.2500%" y="863.50">tokio</text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (334 samples, 0.23%)</title><rect x="99.7720%" y="837" width="0.2280%" height="15" fill="rgb(213,23,39)" fg:x="146189" fg:w="334"/><text x="100.0220%" y="847.50"></text></g></svg></svg>